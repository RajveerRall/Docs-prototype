{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"designer-guide/app-designer-ui/","title":"Overview of the App Designer Interface","text":"<p>The KAIZEN App Designer is a powerful visual environment for building the user interface of your applications. It is divided into three main areas, each designed to streamline your workflow: the Resource Panel on the left, the Canvas in the center, and the Plugin and Setter Panels on the right.</p> <p></p>"},{"location":"designer-guide/app-designer-ui/#1-resource-panel","title":"1. Resource Panel","text":"<p>The Resource Panel is your project's control center. It's where you manage all the pages and assets that make up your application.</p> <ul> <li>Pages: Create new pages, switch between them for editing, and manage their properties.</li> <li>Assets: Upload and organize images, stylesheets (CSS), custom scripts (JS), and fonts.</li> </ul> <p>Learn more about the Resource Panel</p>"},{"location":"designer-guide/app-designer-ui/#2-plugin-panel","title":"2. Plugin Panel","text":"<p>The Plugin Panel contains the tools you need to build and structure your pages.</p> <ul> <li>Component Tree: A hierarchical view of all the components on your page, showing the layout of Sections, Blocks, and Cells.</li> <li>Component Library: A rich library of pre-built UI components that you can drag and drop onto the Canvas.</li> </ul> <p>Learn more about the Plugin Panel</p>"},{"location":"designer-guide/app-designer-ui/#3-canvas","title":"3. Canvas","text":"<p>The Canvas is your interactive workspace. It provides a live, real-time preview of your application, allowing you to see your changes as you make them. You can select, move, and resize components directly on the Canvas.</p> <p>Learn more about the Canvas</p>"},{"location":"designer-guide/app-designer-ui/#4-setter-plugin","title":"4. Setter Plugin","text":"<p>The Setter Plugin is a dynamic panel that appears on the right when you select a component on the Canvas. It allows you to configure the properties, styles, and events of the selected component.</p> <ul> <li>Props: Adjust the content and behavior of a component.</li> <li>Styles: Customize the visual appearance, from colors and fonts to spacing and alignment.</li> <li>Events: Add interactivity by binding component events (like <code>onClick</code>) to your code.</li> </ul> <p></p> <p>Learn more about the Setter Plugin</p> <p>Together, these components provide a comprehensive and intuitive environment for designing and building beautiful, responsive, and functional user interfaces.</p>"},{"location":"designer-guide/app-designer-ui/canvas/","title":"Canvas","text":"<p>The Canvas is the visual heart of the App Designer. It is your interactive workspace where you build, design, and preview your application in real-time.</p> <p></p>"},{"location":"designer-guide/app-designer-ui/canvas/#live-preview-and-editing","title":"Live Preview and Editing","text":"<p>The Canvas provides a live, WYSIWYG (What You See Is What You Get) editor. Every change you make is reflected instantly, allowing you to see the immediate impact of your design choices.</p> <p>You can directly interact with any component on the Canvas: -   Select: Click on any component to select it and view its properties in the Setter Plugin. -   Drag and Drop: Move components around to rearrange your layout. -   Resize: Adjust the size of components to fit your design.</p>"},{"location":"designer-guide/app-designer-ui/canvas/#component-operations","title":"Component Operations","text":"<p>When you select a component on the Canvas, a toolbar appears, allowing you to perform common operations: -   Copy: Duplicate the selected component. -   Lock: Prevent a component from being accidentally moved or edited. -   Delete: Remove the component from the page.</p>"},{"location":"designer-guide/app-designer-ui/canvas/#responsive-previews","title":"Responsive Previews","text":"<p>At the top of the Canvas, you will find a set of icons that allow you to preview your design on different screen sizes: desktop, tablet, and mobile. This is essential for ensuring that your application is fully responsive and provides a great user experience on any device.</p> <p>The Canvas is where your design comes to life. Its intuitive, visual approach to page building makes it easy to create beautiful and functional user interfaces with speed and precision.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/","title":"Plugin Panel","text":"<p>The Plugin Panel is your toolbox for building the structure and content of your pages. It contains two key components: the Component Tree and the Component Library.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#component-tree","title":"Component Tree","text":"<p>The Component Tree provides a hierarchical view of all the components on your current page. It is essential for understanding and managing the layout of your page, which is built on a parent-child structure of Sections, Blocks, and Cells.</p> <ul> <li>Section: The largest container, representing a distinct horizontal area of your page.</li> <li>Block: Used to create column-based layouts within a Section.</li> <li>Cell: The smallest container, which holds the actual UI components like text, images, and buttons.</li> </ul> <p></p> <p>The Component Tree allows you to easily select, move, and nest components to create complex and responsive layouts.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#component-library","title":"Component Library","text":"<p>The Component Library is a collection of pre-built UI components that you can drag and drop directly onto the Canvas. This is where you will find all the building blocks for your application's interface.</p> <p>The library is organized into categories to help you find the components you need: -   General: Basic elements like Text, Buttons, and Icons. -   Layout: Containers like Box and Card. -   Input: Form fields like Text Input, Select, and Checkbox. -   Data Display: Components for visualizing data, such as Tables and Charts.</p> <p>By combining the structural overview of the Component Tree with the rich selection of the Component Library, you can build sophisticated user interfaces with speed and precision.</p>"},{"location":"designer-guide/app-designer-ui/resource-panel/","title":"Resource Panel","text":"<p>The Resource Panel, located on the left side of the App Designer, is your project\u2019s control center. It helps you create, organize, and maintain all the pages and assets your application needs.</p>"},{"location":"designer-guide/app-designer-ui/resource-panel/#pages","title":"Pages","text":"<p>A Page is a separate screen or view in your application, like a login screen, a dashboard, or a product listing. The \"Pages\" section of the Resource Panel is where you manage the overall structure of your application.</p>"},{"location":"designer-guide/app-designer-ui/resource-panel/#creating-a-new-page","title":"Creating a New Page","text":"<p>To add a new page to your application, simply click the \"+\" icon next to the \"Pages\" heading. You will be prompted to enter the page details, such as its name and Page ID.</p> <p></p>"},{"location":"designer-guide/app-designer-ui/resource-panel/#managing-pages","title":"Managing Pages","text":"<ul> <li> <p>Switching Pages: Click on any page in the list to load it into the Canvas for editing.</p> <p></p> </li> <li> <p>Editing Page Properties: Hover over a page and click the edit icon to change its properties, such as its name, Page ID, or layout type.</p> <p></p> </li> </ul>"},{"location":"designer-guide/app-designer-ui/resource-panel/#assets","title":"Assets","text":"<p>The Assets section is your project\u2019s media and file library. This is where you upload and manage all the static files your application will use.</p>"},{"location":"designer-guide/app-designer-ui/resource-panel/#uploading-assets","title":"Uploading Assets","text":"<p>To upload a new asset, click the \"+\" icon next to the \"Assets\" heading. You can upload a wide variety of file types, including:</p> <ul> <li>Images (JPG, PNG, SVG) for backgrounds, icons, and illustrations.</li> <li>CSS files for custom styles that can be applied across your application.</li> <li>JavaScript files for custom client-side logic and interactivity.</li> <li>Font files to bring your own typography into the project.</li> </ul> <p></p> <p>By keeping all your resources organized in the Resource Panel, you can easily access them whenever you need them and ensure consistency across your entire application.</p>"},{"location":"designer-guide/app-designer-ui/setter-plugin/","title":"Setter Plugin","text":"<p>The Setter Plugin is your primary tool for configuring the properties and styles of any component you select on the Canvas. It appears on the right-hand side of the App Designer and provides a comprehensive set of controls to customize the look, feel, and behavior of your components.</p> <p></p>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#properties-props","title":"Properties (Props)","text":"<p>The Props tab allows you to configure the fundamental properties of a component. The available options will vary depending on the selected component, but they typically include:</p> <ul> <li>Content: Set the text for a button, the label for a form field, or the source for an image.</li> <li>Behavior: Configure options like whether a dropdown is searchable or a table is sortable.</li> <li>Data: Bind the component to a data source to display dynamic content.</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#styles","title":"Styles","text":"<p>The Styles tab gives you fine-grained control over the visual appearance of a component. You can adjust a wide range of CSS properties, including:</p> <ul> <li>Layout: Control the size, spacing, and alignment of the component.</li> <li>Typography: Set the font, size, color, and weight of the text.</li> <li>Background: Apply background colors or images.</li> <li>Borders: Add and style borders.</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#events","title":"Events","text":"<p>The Events tab is where you can make your application interactive. You can bind component events, such as <code>onClick</code> for a button or <code>onChange</code> for a text input, to functions in your source code. This is how you will add logic and behavior to your application.</p>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#advanced","title":"Advanced","text":"<p>The Advanced tab provides access to more complex features, such as:</p> <ul> <li>Conditional Rendering: Set the Visible property to an expression to show or hide a component based on a certain condition.</li> <li>Looping: Use the Bind Data feature to render a component multiple times for each item in a list.</li> <li>Unique Identifiers: Assign a <code>refId</code> to a component to reference it in your source code.</li> </ul> <p>The Setter Plugin is a powerful and versatile tool that gives you complete control over every aspect of your components, allowing you to build highly customized and interactive user interfaces.</p>"},{"location":"designer-guide/components/","title":"Components Library","text":"<p>The Component Library is your toolbox in Kaizen\u2019s App Designer. It contains all the pre-built, ready-to-use UI components that you can quickly add to your page just like picking the right Lego piece to complete your structure.</p> <p>While the Component Tree shows you the structure of your page, the Component Library is where you get the actual building blocks to fill that structure.</p>"},{"location":"designer-guide/components/#types-of-components","title":"Types of Components","text":"<p>A component is any functional or visual element you can place on your page. Components can range from basic text and images to complex forms, tables, and charts.</p> <p>You\u2019ll find them grouped logically inside the library, and you can search to locate what you need.</p>"},{"location":"designer-guide/components/#common-examples-include","title":"Common examples include:","text":"<ul> <li>Basic elements: Text, images, buttons, dividers.</li> <li>Forms &amp; inputs: Input fields, text areas, dropdowns, radio buttons, checkboxes.</li> <li>Containers: Cards, lists, grids, accordions.</li> <li>Media: Icons, videos, images.</li> <li>Interactive elements: Tabs, sliders, pagination.</li> </ul>"},{"location":"designer-guide/components/#adding-a-component","title":"Adding a Component","text":"<ol> <li>Open the Component Library Click the Component Library icon in the left sidebar (second from the top).</li> <li>Search or browse Either scroll through the categories or use the search bar to find a specific component.</li> <li>Drag &amp; drop Click on the component and drag it directly onto the Canvas, placing it inside a section, block, or cell.</li> <li>Customize Select the component to open the Setter Plugin on the right-hand side, where you can edit text, style, theme, and behavior.</li> </ol>"},{"location":"designer-guide/components/#how-to-use-the-component-library-effectively","title":"How to use the Component Library effectively","text":"<p>Components in the library are fully reusable, allowing you to place them in multiple locations across your project. Once added, you can adjust their style and behavior to match your design needs, or combine them with other components to create more complex layouts.</p> <p>This flexibility lets you:</p> <ul> <li>Build pages quickly without starting from scratch.</li> <li>Maintain design consistency by reusing the same elements across different pages.</li> <li>Customize individual components for unique requirements.</li> </ul> <p>When you drag a component into the Canvas, it automatically becomes part of the Component Tree structure, meaning you can navigate to it, move it, or modify it just like any other element in your page layout.</p>"},{"location":"designer-guide/components/#example","title":"Example","text":"<p>Let\u2019s say you have a form but it\u2019s missing a Submit button:</p> <ol> <li>Open the Component Library.</li> <li>Search for \u201cButton\u201d.</li> <li>Drag it into the form\u2019s cell.</li> <li>Use the Setter Plugin to change its label to \u201cSubmit\u201d and apply a light or dark theme.</li> </ol> <p></p>"},{"location":"designer-guide/components/#conclusion","title":"Conclusion","text":"<p>The Component Library gives you the speed of pre-built elements with the flexibility to customize them. Combined with the Component Tree and Setter Plugin, it allows you to build rich, interactive pages in minutes.</p> <p>What\u2019s next: Resources Panel Overview \u2192</p>"},{"location":"designer-guide/components/data-display/","title":"Data Display (Tables &amp; Charts)","text":"<p>Effectively displaying data is crucial for creating a user-friendly application. KAIZEN provides powerful components for organizing and visualizing data, including tables and charts.</p>"},{"location":"designer-guide/components/data-display/#tables","title":"Tables","text":"<p>The Table component is a versatile tool for displaying structured data in a tabular format. It is highly customizable and supports features like sorting, pagination, and custom cell rendering.</p>"},{"location":"designer-guide/components/data-display/#practical-example-creating-a-table-with-sorting-and-pagination","title":"Practical Example: Creating a Table with Sorting and Pagination","text":"<p>In this tutorial, we will create a table to display a list of registered courses.</p>"},{"location":"designer-guide/components/data-display/#1-setting-up-the-table","title":"1. Setting Up the Table","text":"<ul> <li>Create a New Page: Start with a new page for your table.</li> <li>Add a Table Component: From the Component Library, drag a Table component onto the canvas.</li> <li>Configure Headers: In the Props tab of the Table component, go to the Data Column section. Here, you can define the headers for your table. For our example, we will add headers for <code>Course Name</code>, <code>Course Code</code>, <code>Subject</code>, <code>Price</code>, etc.</li> </ul>"},{"location":"designer-guide/components/data-display/#2-adding-data-to-the-table","title":"2. Adding Data to the Table","text":"<p>You can populate the table with data in several ways, but a common method is to use a state variable.</p> <ul> <li>Prepare Your Data: In the Source Code Panel, create a state variable (e.g., <code>tableData</code>) and populate it with an array of JSON objects. Each object represents a row in the table, and the keys in the object should correspond to the Data Key you define for each column.</li> <li>Bind the Data: Select the Table component, and in the Props tab, find the Data Source field. Use the Variable Binding option to link it to your <code>tableData</code> state variable.</li> </ul>"},{"location":"designer-guide/components/data-display/#3-implementing-sorting","title":"3. Implementing Sorting","text":"<ul> <li>Enable Sorting: For each column that you want to be sortable, edit the column in the Data Column section and enable the Allow Sorting option.</li> <li>Bind the Sort Event: In the Events tab of the Table component, bind the <code>onSort</code> event to a function in your source code that will handle the sorting logic. This function should update the order of the data in your <code>tableData</code> state variable.</li> </ul>"},{"location":"designer-guide/components/data-display/#4-implementing-pagination","title":"4. Implementing Pagination","text":"<ul> <li>Enable Pagination: In the Props tab of the Table component, you will find the Pagination Configuration section.</li> <li>Bind Pagination Properties:<ul> <li>Bind the Current Page property to a state variable (e.g., <code>currentPage</code>).</li> <li>Bind the Total Records property to a state variable that holds the total number of items in your dataset.</li> <li>Bind the <code>onChange</code> event to a function that updates the <code>currentPage</code> state variable and fetches the data for the new page.</li> </ul> </li> </ul>"},{"location":"designer-guide/components/data-display/#charts","title":"Charts","text":"<p>Charts are an excellent way to visualize data and make it easier to understand. KAIZEN provides several chart components, including bar charts and pie charts.</p>"},{"location":"designer-guide/components/data-display/#practical-example-adding-a-bar-chart","title":"Practical Example: Adding a Bar Chart","text":"<p>Let's create a bar chart to compare the prices of different courses.</p> <ul> <li>Add a Chart Component: From the Component Library, drag a Bar Chart component onto your page.</li> <li>Bind the Data: In the Props tab, use the Variable Binding option to link the chart's data source to the same <code>tableData</code> state variable we used for the table.</li> <li>Configure Axes:<ul> <li>Set the x-axis label to the key in your data that represents the price (e.g., <code>price</code>).</li> <li>Set the y-axis label to the key that represents the course name (e.g., <code>name</code>).</li> </ul> </li> </ul> <p>By following these steps, you can create rich, interactive data displays that enhance the user experience of your application.</p>"},{"location":"designer-guide/components/feedback/","title":"User Feedback (Dialogs)","text":""},{"location":"designer-guide/components/forms/","title":"Information Input (Forms)","text":"<p>Forms are essential for collecting user input. KAIZEN's App Designer provides a powerful set of tools to create everything from simple contact forms to complex, multi-step wizards with validation.</p>"},{"location":"designer-guide/components/forms/#introduction-to-form-fields","title":"Introduction to Form Fields","text":"<p>Forms are built using a variety of Form Item components that accept user input. These can be found in the Component Library.</p> <p>Common form fields include: -   Text Input: For single-line text entries. -   Text Area: For multi-line text. -   Select (Dropdown): For selecting from a list of options. -   Checkbox: For binary choices. -   Radio Button: For selecting one option from a group. -   Date Picker: For selecting dates.</p>"},{"location":"designer-guide/components/forms/#form-validation","title":"Form Validation","text":"<p>Validation rules ensure that the data submitted by users is in the correct format. This is the first line of defense against invalid data.</p> <p>You can add validation rules to any Form Item from the Props tab. Common validation types include: -   Mandatory: Ensures the field is not left empty. -   Length: Restricts the minimum and/or maximum number of characters. -   Format: Enforces specific formats, such as numbers, email addresses, or custom patterns using Regular Expressions (Regex).</p>"},{"location":"designer-guide/components/forms/#practical-example-creating-a-multi-step-form","title":"Practical Example: Creating a Multi-Step Form","text":"<p>In this tutorial, we will build a multi-step course creation form. This is a common pattern for breaking down long forms into manageable steps, improving the user experience.</p> <p>Our form will have four steps: 1.  Course Info 2.  Instructor Particulars 3.  Class Location 4.  Class Schedule</p>"},{"location":"designer-guide/components/forms/#1-setting-up-the-form-skeleton","title":"1. Setting Up the Form Skeleton","text":"<p>Before adding the form fields, we need to create the basic structure.</p> <ul> <li>Create a New Page: Start by creating a new page for your form.</li> <li>Add a Steps Component: From the Component Library, drag a Steps component to the top of your page. This will serve as the visual indicator for the form's progress.</li> <li>Add a Form Template: Drag a Form Template component below the Steps component. This will be the container for all our form fields.</li> <li>Create Navigation Buttons: Inside the Form Template, add \"Next\" and \"Previous\" buttons to allow users to navigate between the steps.</li> </ul>"},{"location":"designer-guide/components/forms/#2-building-the-course-info-form","title":"2. Building the \"Course Info\" Form","text":"<p>The first step is to collect basic information about the course.</p> <ul> <li>Add Form Items: Drag the necessary Form Item components into the form. For this step, we'll need:<ul> <li><code>Course Title</code> (Text Input)</li> <li><code>Course Code</code> (Text Input with number validation)</li> <li><code>Enrollment Type</code> (Select)</li> <li><code>Subject Type</code> (Select)</li> <li><code>Course Fee</code> (Text Input with number validation)</li> <li><code>Description</code> (Text Area)</li> </ul> </li> <li>Configure Validation: Add validation rules to each field as needed. For example, make the <code>Course Title</code> and <code>Course Code</code> mandatory.</li> </ul>"},{"location":"designer-guide/components/forms/#3-creating-subsequent-steps","title":"3. Creating Subsequent Steps","text":"<p>Follow a similar process to create the remaining forms for \"Instructor Particulars,\" \"Class Location,\" and \"Class Schedule.\" You can use a variety of form fields to meet the requirements of each step.</p>"},{"location":"designer-guide/components/forms/#4-implementing-step-navigation","title":"4. Implementing Step Navigation","text":"<p>To make the multi-step form functional, you need to control the visibility of each form based on the current step.</p> <ul> <li>Use a State Variable: In the Source Code Panel, create a state variable (e.g., <code>currentStep</code>) to keep track of the active step.</li> <li>Control Visibility: For each form, use the Advanced tab to set the Visible property to an expression that checks the value of <code>currentStep</code>. For example, the \"Course Info\" form should be visible only when <code>this.state.currentStep === 0</code>.</li> <li>Add Logic to Buttons: In the Events tab for the \"Next\" and \"Previous\" buttons, bind <code>onClick</code> events to functions that increment or decrement the <code>currentStep</code> variable.</li> </ul> <p>By following these steps, you can create a user-friendly, multi-step form that guides users through the data entry process in a clear and organized manner.</p>"},{"location":"designer-guide/components/general/","title":"General Components","text":""},{"location":"designer-guide/components/navigation/","title":"Navigation (Steps &amp; Tabs)","text":""},{"location":"designer-guide/layouts/building-a-screen-skeleton/","title":"Practical Example: Building a Screen Skeleton","text":"<p>In this tutorial, we will walk through the methodology of creating a page skeleton from scratch using an example webpage. This will demonstrate how to effectively use Sections, Blocks, and Cells to build a structured and responsive layout.</p>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#the-goal","title":"The Goal","text":"<p>We will build the basic framework for the following webpage:</p> <p></p>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-1-create-the-initial-layout","title":"Step 1: Create the Initial Layout","text":"<p>First, identify the main horizontal and vertical divisions of the page. This page has a main content area that is split into two vertical columns.</p> <ol> <li>Start with a single Section.</li> <li>Inside the Section, select the default Block.</li> <li>Use the vertical cut option to split the Block into two columns, creating a left and a right block for our content.</li> </ol>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-2-divide-the-left-block","title":"Step 2: Divide the Left Block","text":"<p>The left block contains two distinct horizontal areas.</p> <ol> <li>Select the Cell inside the left Block.</li> <li>Use the horizontal split option to divide the cell into two rows (a top and a bottom cell).</li> </ol>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-3-structure-the-top-left-area-for-cards","title":"Step 3: Structure the Top-Left Area for Cards","text":"<p>The top-left area will contain a grid of cards.</p> <ol> <li>Select the top cell you created in the previous step.</li> <li>Use the horizontal split again to create two rows.</li> <li>Use the vertical split on each of those new cells to create a 2x2 grid.</li> </ol>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-4-add-card-components","title":"Step 4: Add Card Components","text":"<p>Now that the grid structure is in place, you can add the Card components.</p> <ol> <li>From the Component Library, drag a Card component into the top-left cell of your new grid.</li> </ol>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-5-populate-the-card-grid","title":"Step 5: Populate the Card Grid","text":"<ol> <li>Duplicate the Card component and place a copy in each of the four cells in your 2x2 grid. You can, of course, add more cards as needed.</li> </ol>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-6-add-the-table-component","title":"Step 6: Add the Table Component","text":"<p>The area below the cards in the left column is for a table.</p> <ol> <li>Select the bottom cell from Step 2.</li> <li>Drag a Table component from the Component Library into this cell.</li> </ol>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-7-add-components-to-the-right-block","title":"Step 7: Add Components to the Right Block","text":"<p>The right block contains a mix of components. You can now populate this area.</p> <ol> <li>Drag and drop the required components, such as Text, Buttons, or even other Cards, into the cell of the right block.</li> </ol> <p>Your final screen skeleton is now complete and ready for content and styling. This structured approach ensures that your layout is logical, scalable, and responsive from the start.</p>"},{"location":"designer-guide/layouts/hierarchy/","title":"Layout Hierarchy: Section, Block, and Cell","text":"<p>Building a solid layout is the first step in creating a well-structured and responsive page. In KAIZEN, the layout is built on a clear parent-child hierarchy of three key components: Sections, Blocks, and Cells.</p> <ul> <li>Section: Can contain Blocks.</li> <li>Block: Can contain Cells, but not Sections.</li> <li>Cell: Cannot contain Sections or Blocks.</li> </ul> <p></p>"},{"location":"designer-guide/layouts/hierarchy/#section-vs-block","title":"Section vs. Block","text":"<p>Understanding when to use a Section versus a Block is key to creating effective layouts.</p>"},{"location":"designer-guide/layouts/hierarchy/#sections","title":"Sections","text":"<p>Sections are the largest layout containers. They always take up the full width of the page and are used to group major, related parts of your UI.</p> <ul> <li>Organization: Use Sections to create distinct horizontal areas, such as a header, a feature showcase, or a footer.</li> <li>Customization: Sections offer more customization options for backgrounds and styling.</li> <li>Scalability: You can easily add or remove entire sections without affecting the rest of the page.</li> </ul> <p></p>"},{"location":"designer-guide/layouts/hierarchy/#blocks","title":"Blocks","text":"<p>Blocks are used for creating column-based layouts within a Section.</p> <ul> <li>Granularity: Use multiple Blocks to create side-by-side content, such as a two or three-column layout.</li> <li>Flexibility: Blocks can be easily rearranged within a Section to adapt to different design requirements.</li> </ul> <p></p>"},{"location":"designer-guide/layouts/hierarchy/#block-vs-cell","title":"Block vs. Cell","text":"<p>The distinction between Blocks and Cells is crucial for creating responsive designs.</p>"},{"location":"designer-guide/layouts/hierarchy/#blocks_1","title":"Blocks","text":"<ul> <li>Layout: Blocks support a vertical cut option and use a structured grid layout.</li> <li>Responsiveness: By default, Blocks have a responsive wrapping behavior. When the screen size is reduced, Blocks will stack vertically.</li> </ul>"},{"location":"designer-guide/layouts/hierarchy/#cells","title":"Cells","text":"<ul> <li>Layout: Cells support both vertical and horizontal cut options and use a flexible box layout.</li> <li>Responsiveness: Cells do not wrap by default. They are designed to hold content within a Block and maintain their relative positions.</li> </ul> <p>By understanding and correctly using the hierarchy of Sections, Blocks, and Cells, you can build complex, responsive, and maintainable page layouts with ease.</p>"},{"location":"designer-guide/layouts/managing-pages/","title":"Managing Pages","text":"<p>A Page is the canvas for your user interface. It is the top-level container for all the content that a user will see on a single screen. Before you can add components like forms, tables, or charts, you must first create a page to hold them.</p>"},{"location":"designer-guide/layouts/managing-pages/#creating-a-new-page","title":"Creating a New Page","text":"<p>All pages are created and managed from the Resource Panel. When you create a new page, you are essentially creating a blank slate on which you can build a specific part of your application's UI.</p>"},{"location":"designer-guide/layouts/managing-pages/#building-the-page-layout","title":"Building the Page Layout","text":"<p>Once you have a page, the next step is to define its structure. A well-structured layout is essential for creating a user experience that is both intuitive and responsive.</p> <p>The process of building a page layout involves two key concepts:</p> <ol> <li> <p>Layout Hierarchy: Understanding the relationship between Sections, Blocks, and Cells is the first step in building a solid foundation for your page. This hierarchy allows you to create everything from simple, single-column layouts to complex, multi-column designs.</p> </li> <li> <p>Building a Screen Skeleton: Before adding content, it is best practice to build a \"screen skeleton.\" This involves using the layout components to create the high-level structure of your page, ensuring that it is well-organized and ready for your components.</p> </li> </ol> <p>By first creating your pages and then building a thoughtful layout skeleton, you can ensure that your application is scalable, maintainable, and provides a consistent user experience across all screens.</p>"},{"location":"designer-guide/layouts/responsive-design/","title":"Responsive Design","text":"<p>Building a responsive layout ensures that your application looks and functions perfectly on any device, from wide-screen desktops to tablets and mobile phones. KAIZEN's App Designer has built-in tools to help you create and preview responsive designs.</p>"},{"location":"designer-guide/layouts/responsive-design/#previewing-on-different-devices","title":"Previewing on Different Devices","text":"<p>The Canvas allows you to instantly preview your design on different screen sizes. At the top of the Canvas, you will find icons to switch between desktop, tablet, and mobile views. Use these previews to check how your layout adapts and ensure that content remains readable and accessible on smaller screens.</p> <p></p>"},{"location":"designer-guide/layouts/responsive-design/#responsive-behavior-of-blocks-vs-cells","title":"Responsive Behavior of Blocks vs. Cells","text":"<p>The layout hierarchy you create with Blocks and Cells has a direct impact on how your application responds to different screen sizes.</p> <ul> <li> <p>Blocks for Major Layout: By default, when the screen becomes too narrow to fit multiple Blocks side-by-side, they will automatically wrap and stack vertically. This is the primary mechanism for creating responsive column layouts. For example, a three-column layout on a desktop will become a single-column layout on a mobile phone.</p> </li> <li> <p>Cells for Fine-Tuning: Cells, on the other hand, do not wrap by default. They are designed to hold content within a Block. You can use Cell splitting to create more complex arrangements that you want to maintain across screen sizes.</p> </li> </ul> <p>By combining the automatic wrapping of Blocks with the precise control of Cells, you can create sophisticated layouts that are both powerful and responsive.</p>"},{"location":"designer-guide/layouts/responsive-design/#practical-example-creating-a-responsive-login-page","title":"Practical Example: Creating a Responsive Login Page","text":"<p>Let's walk through how to create a responsive two-panel layout for a login page.</p>"},{"location":"designer-guide/layouts/responsive-design/#1-create-a-two-column-layout","title":"1. Create a Two-Column Layout","text":"<p>To create a responsive layout that adapts to smaller screens, we will use the Block component to design the left and right panels of the page.</p> <ul> <li> <p>With the Block component selected, hover over the middle handle until the Cut icon appears, then click it to vertically split your block into two.</p> <p></p> </li> </ul>"},{"location":"designer-guide/layouts/responsive-design/#2-add-content-containers","title":"2. Add Content Containers","text":"<ul> <li> <p>From the Components Library, drag a Box component into each of the two cells you just created. These will serve as the containers for the left and right panels.</p> <p></p> </li> </ul>"},{"location":"designer-guide/layouts/responsive-design/#3-style-the-panels","title":"3. Style the Panels","text":"<ul> <li>Select the first Box (left panel) and apply your desired styles. For example, you can set a background color and ensure the height is set to <code>100%</code> to fill the available space.</li> <li> <p>Do the same for the second Box (right panel).</p> <p></p> </li> </ul>"},{"location":"designer-guide/layouts/responsive-design/#4-observe-the-responsive-behavior","title":"4. Observe the Responsive Behavior","text":"<p>When you switch to the mobile preview, you will see that the two blocks automatically stack on top of each other, creating a user-friendly, single-column layout.</p> <p></p> <p>This demonstrates how KAIZEN's layout system, with its intelligent use of Blocks, makes it easy to build responsive designs with minimal effort.</p>"},{"location":"getting-started/account-setup/","title":"Account Setup &amp; Login","text":"<p>Before you can start building, you need to log into your KAIZEN environment.</p>"},{"location":"getting-started/account-setup/#daas-environment-access","title":"DaaS Environment Access","text":"<p>All trainees and new users are provided with an account in the Cloud Development Environment as a Service (DaaS).</p> <ul> <li>Environment URL: https://kaizen-daas.toppanecquaria.com/#/login</li> </ul>"},{"location":"getting-started/account-setup/#logging-in","title":"Logging In","text":"<p>To log in, you will need the following credentials, which should be provided by your system administrator:</p> <ol> <li>User Domain: This defines the group of applications you have access to. For most new users, this will be <code>AGP Designer</code>.</li> <li>Username: Your unique username, typically in an email format.<ul> <li>Example: <code>username@toppanecquaria.com</code></li> </ul> </li> <li>Password: Your assigned password.</li> </ol> <p> </p> <p>Enter your credentials and click \"Sign In\" to access the KAIZEN Studio.</p>"},{"location":"getting-started/account-setup/#troubleshooting","title":"Troubleshooting","text":"<p>If you have trouble logging in, please try the following:</p> <ul> <li>Ensure you have selected the correct User Domain from the dropdown menu.</li> <li>Double-check that your username and password are correct.</li> <li>If you have forgotten your password or continue to have issues, please contact your project administrator to have your credentials reset.</li> </ul>"},{"location":"getting-started/core-concepts/","title":"Core Concepts","text":"<p>To get the most out of KAIZEN, it's helpful to understand the key concepts and components that make up the platform.</p>"},{"location":"getting-started/core-concepts/#the-kaizen-ecosystem","title":"The KAIZEN Ecosystem","text":"<p>The KAIZEN platform is not a single tool, but a suite of integrated designers and services that work together. This is often referred to as the KAIZEN Studio.</p> <p> </p>"},{"location":"getting-started/core-concepts/#key-components","title":"Key Components","text":"<ul> <li> <p>App Designer: The visual, drag-and-drop environment for building user interfaces (the \"frontend\"). This is where you design pages, add components like forms and tables, and manage the user experience.</p> </li> <li> <p>Service Designer: The tool for creating and managing the \"backend\" logic of your application. You can define APIs, connect to external services, and manage how data is handled.</p> </li> <li> <p>Database Designer: A visual interface for creating and managing your application's database schema. You can define tables, columns, and relationships without writing complex SQL.</p> </li> <li> <p>Workflow Designer: A powerful tool for automating business processes. You can visually map out multi-step workflows, define logic, and assign tasks to different users or systems.</p> </li> <li> <p>Theme Designer: Allows you to customize the look and feel of your applications. You can manage color schemes, fonts, and layouts to ensure consistent branding.</p> </li> <li> <p>Identity &amp; Access Management (IAM): A centralized service for managing users, roles, and permissions. IAM ensures that your applications are secure and that users only have access to the features and data they are authorized to see.</p> </li> </ul>"},{"location":"getting-started/core-concepts/#fundamental-terminology","title":"Fundamental Terminology","text":"<ul> <li>Application: A project in KAIZEN. An application can be a standalone app, or it can be a \"Main\" application that coordinates multiple \"Micro\" applications.</li> <li>Page: A single screen or view within an application. You build pages in the App Designer.</li> <li>Component: The building blocks of a page. Components can be simple (like a Button or Text) or complex (like a Table or a Chart).</li> <li>Service: A backend microservice that provides data and functionality to your application via APIs.</li> <li>Datasource: A connection to a data source, such as a database or an external API, which you can then bind to your frontend components.</li> </ul>"},{"location":"getting-started/introduction/","title":"Welcome to KAIZEN","text":"<p>Welcome to the KAIZEN platform! This documentation will guide you through everything you need to know to build, deploy, and manage powerful applications with speed and flexibility.</p> Core Concepts <p>Understand the fundamental concepts and architecture of the KAIZEN platform.</p> A Tour of the Studio <p>Get a complete overview of the KAIZEN Studio and its powerful features.</p> Designer's Guide <p>Learn how to use the visual App Designer to create beautiful user interfaces.</p> Developer's Guide <p>Design databases, build robust APIs, and automate complex business logic.</p> Tutorials <p>Follow step-by-step guides to build your first application and learn key features.</p> Component Reference <p>Explore the comprehensive library of UI components available in the App Designer.</p>"},{"location":"getting-started/studio-tour/","title":"A Tour of the KAIZEN Studio","text":"<p>The KAIZEN Studio is your central hub for building and managing applications. It provides access to all the powerful designers and tools you need to bring your vision to life.</p> <p>Note that not all features may be accessible depending on your assigned role. The platform uses Identity and Access Management (IAM) to control access, ensuring that users only see the tools relevant to their responsibilities.</p>"},{"location":"getting-started/studio-tour/#app-designer","title":"App Designer","text":"<p>The App Designer is where you will spend most of your time creating the user interface of your application. It is composed of several key panels:</p> <ul> <li>Resource Panel: Manage and access the various pages of your application.</li> <li>Plugin Panel: Access the Component Tree, Components Library, and other tools to build your UI.</li> <li>Canvas: The visual workspace where you design and arrange the elements of your project.</li> <li>Source Code Panel: View and edit the underlying source code of your project.</li> </ul>"},{"location":"getting-started/studio-tour/#saving-and-publishing","title":"Saving and Publishing","text":"<p>In KAIZEN, you can save your progress as a draft or publish it for others to see.</p> <ul> <li> <p>Save Draft: When you save a draft, it is stored privately in your account. Other users cannot see your changes until you publish them.</p> <p></p> </li> <li> <p>Publish Page: When you publish a page, your changes become visible to other users with access to the project.</p> <p></p> </li> </ul>"},{"location":"getting-started/studio-tour/#previewing-your-application","title":"Previewing Your Application","text":"<p>The preview feature allows you to see how your page will look and function before it goes live. You can also test the user experience for different roles.</p> <p></p>"},{"location":"getting-started/studio-tour/#collaborative-editing-with-page-lock","title":"Collaborative Editing with Page Lock","text":"<p>The Page Lock feature prevents multiple users from editing the same page simultaneously, avoiding conflicts and ensuring a smooth collaborative workflow.</p> <p></p>"},{"location":"getting-started/studio-tour/#starting-a-new-project","title":"Starting a New Project","text":"<p>When you start a new project, an empty application will be created for you. You can start editing it by clicking on the design icon.</p> <p></p>"}]}