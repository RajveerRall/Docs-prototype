{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"designer-guide/app-designer-ui/","title":"Overview of the App Designer Interface","text":"<p>The KAIZEN App Designer is a powerful visual environment for building the user interface of your applications. It is divided into three main areas, each designed to streamline your workflow: the Resource Panel on the left, the Canvas in the center, and the Plugin and Setter Panels on the right.</p> <p></p>"},{"location":"designer-guide/app-designer-ui/#1-resource-panel","title":"1. Resource Panel","text":"<p>The Resource Panel is your project's control center. It's where you manage all the pages and assets that make up your application.</p> <ul> <li>Pages: Create new pages, switch between them for editing, and manage their properties.</li> <li>Assets: Upload and organize images, stylesheets (CSS), custom scripts (JS), and fonts.</li> </ul> <p>Learn more about the Resource Panel</p>"},{"location":"designer-guide/app-designer-ui/#2-plugin-panel","title":"2. Plugin Panel","text":"<p>The Plugin Panel contains the tools you need to build and structure your pages.</p> <ul> <li>Component Tree: A hierarchical view of all the components on your page, showing the layout of Sections, Blocks, and Cells.</li> <li>Component Library: A rich library of pre-built UI components that you can drag and drop onto the Canvas.</li> <li>Datasource: Manage data connections and API repositories for your application.</li> <li>Source Code Panel: View and edit the underlying source code directly.</li> <li>Revision: Track changes and maintain version history of your project.</li> <li>Comments: Add collaborative annotations and notes to your application.</li> <li>Page Scan: Analyze your project for potential issues, errors, or improvements.</li> <li>Libraries: Import reusable code and resources into your project.</li> <li>Schema: Define JSON data structures and relationships.</li> </ul> <p>Learn more about the Plugin Panel</p>"},{"location":"designer-guide/app-designer-ui/#3-canvas","title":"3. Canvas","text":"<p>The Canvas is your interactive workspace. It provides a live, real-time preview of your application, allowing you to see your changes as you make them. You can select, move, and resize components directly on the Canvas.</p> <p>Learn more about the Canvas</p>"},{"location":"designer-guide/app-designer-ui/#4-setter-plugin","title":"4. Setter Plugin","text":"<p>The Setter Plugin is a dynamic panel that appears on the right when you select a component on the Canvas. It allows you to configure the properties, styles, and events of the selected component.</p> <ul> <li>Props: Adjust the content and behavior of a component.</li> <li>Styles: Customize the visual appearance, from colors and fonts to spacing and alignment.</li> <li>Events: Add interactivity by binding component events (like <code>onClick</code>) to your code.</li> </ul> <p>Learn more about the Setter Plugin</p>"},{"location":"designer-guide/app-designer-ui/#core-app-designer-features","title":"Core App Designer Features","text":""},{"location":"designer-guide/app-designer-ui/#save-draft","title":"Save Draft","text":"<p>The Save Draft feature allows you to save your project progress without finalizing the design. Drafts are stored privately in your account and are not visible to other users.</p> <ul> <li>Auto-save: Automatically saves every 15 minutes (configurable at system level)</li> <li>Private storage: Only you can access your saved drafts</li> <li>Draft recovery: Prompts to open saved drafts when returning to a page</li> </ul>"},{"location":"designer-guide/app-designer-ui/#publish-page","title":"Publish Page","text":"<p>The Publish Page feature makes your finalized page visible to other users in the project. Once published, team members can view and continue editing your work.</p> <ul> <li>Team collaboration: Enables shared access to published content</li> <li>Revision history: Updates are tracked in the revision system</li> <li>Public visibility: Changes become available to all project members</li> </ul>"},{"location":"designer-guide/app-designer-ui/#preview-page","title":"Preview Page","text":"<p>The Preview Page feature provides a real-time view of how your page will appear and function for end-users.</p> <ul> <li>Functionality testing: Test buttons, links, forms, and interactive elements</li> <li>Role-based access: Configure privileges and roles during design stage</li> <li>Live preview: See exactly how your page will look before going live</li> </ul>"},{"location":"designer-guide/app-designer-ui/#page-lock","title":"Page Lock","text":"<p>The Page Lock feature controls collaborative editing in shared project environments, preventing conflicts and maintaining content integrity.</p> <ul> <li>Exclusive editing: Only the user who locked the page can make significant changes</li> <li>Conflict prevention: Ensures critical work isn't overwritten by others</li> <li>Manager override: Project managers can unlock pages when needed</li> </ul>"},{"location":"designer-guide/app-designer-ui/#reset-functionality","title":"Reset Functionality","text":"<p>The Reset feature clears all components from a page, returning it to an empty state.</p> <ul> <li>Complete cleanup: Removes all added components and layouts</li> <li>Irreversible action: Cannot be undone once executed</li> <li>Fresh start: Provides a clean slate for redesigning</li> </ul>"},{"location":"designer-guide/app-designer-ui/#revision-management","title":"Revision Management","text":"<p>The Revision system tracks all changes made to your project over time, providing a complete version history.</p> <ul> <li>Change tracking: Monitor modifications and updates</li> <li>Version control: Access previous states of your project</li> <li>Rollback capability: Revert to earlier versions if needed</li> </ul> <p>Together, these components and features provide a comprehensive and intuitive environment for designing and building beautiful, responsive, and functional user interfaces with robust collaboration and version control capabilities.</p>"},{"location":"designer-guide/app-designer-ui/canvas/","title":"Canvas","text":"<p>The Canvas is the central workspace of the KAIZEN App Designer where you design and arrange the elements of your project. It's the interactive area where you create, build, and visualize your application interface.</p>"},{"location":"designer-guide/app-designer-ui/canvas/#canvas-overview","title":"Canvas Overview","text":"<p>The Canvas provides a live, real-time preview of your application, allowing you to see your changes as you make them. It's designed to give you an intuitive understanding of how your application will look and function for end-users.</p>"},{"location":"designer-guide/app-designer-ui/canvas/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Live Preview: See changes in real-time as you design</li> <li>Interactive Workspace: Select, move, and resize components directly</li> <li>Visual Design: WYSIWYG (What You See Is What You Get) interface</li> <li>Responsive Design: Visualize how your layout adapts to different screen sizes</li> </ul>"},{"location":"designer-guide/app-designer-ui/canvas/#canvas-functionality","title":"Canvas Functionality","text":""},{"location":"designer-guide/app-designer-ui/canvas/#component-selection","title":"Component Selection","text":"<ul> <li>Click to Select: Click on any component to select it for editing</li> <li>Multi-selection: Hold Ctrl/Cmd to select multiple components</li> <li>Selection Indicators: Clear visual feedback shows which components are selected</li> <li>Selection in Tree: Components can also be selected from the Component Tree</li> </ul>"},{"location":"designer-guide/app-designer-ui/canvas/#component-manipulation","title":"Component Manipulation","text":"<ul> <li>Drag and Drop: Move components around the Canvas to reposition them</li> <li>Resize Components: Use handles to adjust component dimensions</li> <li>Copy and Paste: Duplicate components for reuse</li> <li>Delete Components: Remove unwanted components from your design</li> </ul>"},{"location":"designer-guide/app-designer-ui/canvas/#layout-management","title":"Layout Management","text":"<ul> <li>Grid System: Use the built-in grid system for consistent layouts</li> <li>Alignment Tools: Align components horizontally and vertically</li> <li>Spacing Controls: Manage spacing between components</li> <li>Responsive Breakpoints: Configure how layouts adapt to different screen sizes</li> </ul>"},{"location":"designer-guide/app-designer-ui/canvas/#canvas-workflow","title":"Canvas Workflow","text":""},{"location":"designer-guide/app-designer-ui/canvas/#design-process","title":"Design Process","text":"<ol> <li>Plan Your Layout: Consider the structure and organization of your page</li> <li>Add Components: Drag components from the Component Library to the Canvas</li> <li>Arrange Elements: Position and size components according to your design</li> <li>Configure Properties: Use the Setter Plugin to customize component behavior</li> <li>Test and Refine: Preview your design and make adjustments as needed</li> </ol>"},{"location":"designer-guide/app-designer-ui/canvas/#best-practices","title":"Best Practices","text":"<ul> <li>Start with Structure: Begin by adding layout components (Sections, Blocks, Cells)</li> <li>Use Grid System: Leverage the grid system for consistent spacing and alignment</li> <li>Test Responsiveness: Regularly check how your design looks on different screen sizes</li> <li>Iterate Quickly: Make small changes and preview frequently to refine your design</li> </ul>"},{"location":"designer-guide/app-designer-ui/canvas/#canvas-integration","title":"Canvas Integration","text":""},{"location":"designer-guide/app-designer-ui/canvas/#with-other-panels","title":"With Other Panels","text":"<ul> <li>Resource Panel: Pages and assets are displayed and managed here</li> <li>Plugin Panel: Components and tools are accessed from here</li> <li>Setter Plugin: Component properties are configured here when components are selected</li> </ul>"},{"location":"designer-guide/app-designer-ui/canvas/#with-preview-mode","title":"With Preview Mode","text":"<ul> <li>Live Preview: Canvas changes are immediately reflected in preview mode</li> <li>Functionality Testing: Test interactive elements directly on the Canvas</li> <li>User Experience Validation: Ensure the design meets user experience requirements</li> </ul>"},{"location":"designer-guide/app-designer-ui/canvas/#canvas-features","title":"Canvas Features","text":""},{"location":"designer-guide/app-designer-ui/canvas/#visual-design-tools","title":"Visual Design Tools","text":"<ul> <li>Component Library Integration: Easy access to all available components</li> <li>Drag and Drop Interface: Intuitive component placement</li> <li>Real-time Updates: See changes immediately as you work</li> <li>Visual Feedback: Clear indicators for selection, hover, and interaction states</li> </ul>"},{"location":"designer-guide/app-designer-ui/canvas/#layout-tools","title":"Layout Tools","text":"<ul> <li>Grid System: Built-in responsive grid for consistent layouts</li> <li>Alignment Guides: Visual guides for precise component positioning</li> <li>Spacing Tools: Consistent spacing management across your design</li> <li>Responsive Controls: Configure how layouts adapt to different devices</li> </ul>"},{"location":"designer-guide/app-designer-ui/canvas/#development-tools","title":"Development Tools","text":"<ul> <li>Component Tree Integration: Visual representation of your page structure</li> <li>Property Configuration: Direct access to component settings</li> <li>Event Binding: Connect component interactions to your application logic</li> <li>Data Binding: Link components to data sources and APIs</li> </ul>"},{"location":"designer-guide/app-designer-ui/canvas/#canvas-benefits","title":"Canvas Benefits","text":""},{"location":"designer-guide/app-designer-ui/canvas/#design-efficiency","title":"Design Efficiency","text":"<ul> <li>Visual Development: See exactly what you're building as you build it</li> <li>Rapid Prototyping: Quickly create and test design concepts</li> <li>Iterative Design: Make changes and see results immediately</li> <li>Design Validation: Ensure your design meets requirements before implementation</li> </ul>"},{"location":"designer-guide/app-designer-ui/canvas/#collaboration","title":"Collaboration","text":"<ul> <li>Shared Understanding: Team members can see the design in context</li> <li>Real-time Feedback: Get immediate feedback on design changes</li> <li>Version Control: Track design changes through the revision system</li> <li>Team Coordination: Coordinate design work across team members</li> </ul>"},{"location":"designer-guide/app-designer-ui/canvas/#quality-assurance","title":"Quality Assurance","text":"<ul> <li>Visual Testing: Test the visual appearance of your application</li> <li>Functionality Testing: Verify that interactive elements work correctly</li> <li>Responsive Testing: Ensure your design works on all devices</li> <li>User Experience Testing: Validate the overall user experience</li> </ul> <p>The Canvas is the heart of the KAIZEN App Designer, providing you with an intuitive and powerful workspace for creating beautiful, functional, and responsive user interfaces. By mastering the Canvas, you can efficiently design and build applications that meet the highest standards of quality and user experience.</p>"},{"location":"designer-guide/app-designer-ui/core-features/","title":"Core App Designer Features","text":"<p>The KAIZEN App Designer provides several essential features that streamline your development workflow and enhance collaboration. These core features are fundamental to working effectively with the platform.</p>"},{"location":"designer-guide/app-designer-ui/core-features/#save-draft","title":"Save Draft","text":"<p>The Save Draft feature allows you to save your project progress without finalizing the design. This is particularly useful when you want to preserve your work-in-progress while continuing development.</p> <p></p>"},{"location":"designer-guide/app-designer-ui/core-features/#how-it-works","title":"How It Works","text":"<ol> <li>Manual Save: Click the save button to manually save your current progress</li> <li>Auto-save: Automatically saves every 15 minutes (configurable at system level)</li> <li>Private Storage: Drafts are stored privately in your account and not visible to other users</li> </ol>"},{"location":"designer-guide/app-designer-ui/core-features/#key-benefits","title":"Key Benefits","text":"<ul> <li>Progress Preservation: Never lose your work due to unexpected interruptions</li> <li>Private Development: Work on changes without affecting the published version</li> <li>Flexible Workflow: Save multiple iterations before finalizing your design</li> <li>Collaboration Safety: Other users continue to see the published version</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#draft-recovery","title":"Draft Recovery","text":"<p>When you return to a page with saved drafts: - Prompt Dialog: The system will ask if you want to open the saved draft - Choice Options:   - Yes: Opens the page with your previously saved draft   - No: Opens the page from the latest published revision</p>"},{"location":"designer-guide/app-designer-ui/core-features/#important-notes","title":"Important Notes","text":"<ul> <li>Private Access: Only you can access your saved drafts</li> <li>Account-specific: Drafts are tied to your user account</li> <li>Page-specific: Each page maintains its own draft state</li> <li>Temporary Storage: Drafts are meant for temporary work, not long-term storage</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#publish-page","title":"Publish Page","text":"<p>The Publish Page feature makes your finalized page visible to other users in the project. This transforms your private work into a shared resource that the entire team can access.</p>"},{"location":"designer-guide/app-designer-ui/core-features/#publishing-process","title":"Publishing Process","text":"<ol> <li>Finalize Changes: Complete your design modifications and testing</li> <li>Click Publish: Use the publish button to make changes public</li> <li>Confirmation: The system confirms successful publication</li> <li>Team Access: Other users can now view and edit the published content</li> </ol>"},{"location":"designer-guide/app-designer-ui/core-features/#what-happens-when-you-publish","title":"What Happens When You Publish","text":"<ul> <li>Public Visibility: Your changes become visible to all project members</li> <li>Revision Update: A new entry is added to the revision history</li> <li>Collaboration Enabled: Team members can view and continue editing your work</li> <li>Draft Clearance: Any saved drafts are cleared after successful publication</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#benefits-of-publishing","title":"Benefits of Publishing","text":"<ul> <li>Team Collaboration: Enable other developers to build upon your work</li> <li>Progress Sharing: Keep the team updated on your development progress</li> <li>Quality Assurance: Allow team review and feedback on your changes</li> <li>Integration: Enable other features that depend on published content</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#best-practices","title":"Best Practices","text":"<ul> <li>Test Thoroughly: Ensure your page works correctly before publishing</li> <li>Communicate Changes: Let your team know about significant updates</li> <li>Review Regularly: Publish incrementally rather than in large batches</li> <li>Document Updates: Provide context for the changes you're publishing</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#preview-page","title":"Preview Page","text":"<p>The Preview Page feature provides a real-time view of how your page will appear and function for end-users. This is essential for testing and quality assurance before publishing.</p>"},{"location":"designer-guide/app-designer-ui/core-features/#preview-functionality","title":"Preview Functionality","text":"<ul> <li>Live Preview: See exactly how your page will look to end-users</li> <li>Functionality Testing: Test buttons, links, forms, and interactive elements</li> <li>Responsive Testing: Verify how your page appears on different screen sizes</li> <li>User Experience Validation: Ensure the page meets user experience requirements</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#role-based-access-configuration","title":"Role-Based Access Configuration","text":"<p>When you click the preview button, you'll be prompted to select navigator roles: - Role Selection: Choose which user roles can access the page - Privilege Configuration: Set up necessary access restrictions - Testing Different Access Levels: Preview how the page appears for different user types</p>"},{"location":"designer-guide/app-designer-ui/core-features/#preview-benefits","title":"Preview Benefits","text":"<ul> <li>Issue Detection: Identify problems before they reach end-users</li> <li>Design Validation: Ensure your design meets requirements</li> <li>Functionality Testing: Verify all interactive elements work correctly</li> <li>User Experience Testing: Test the page from an end-user perspective</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#preview-settings","title":"Preview Settings","text":"<p>Access additional configuration options through the application settings icon: - Privilege Management: Configure user access levels - Role Assignment: Define which roles can access specific pages - Navigator Configuration: Set up navigation menu access - Security Settings: Configure authentication and authorization</p>"},{"location":"designer-guide/app-designer-ui/core-features/#page-lock","title":"Page Lock","text":"<p>The Page Lock feature is a mechanism designed to control and manage collaborative editing in shared project environments. It ensures that critical or in-progress work isn't unintentionally modified or overwritten by others.</p>"},{"location":"designer-guide/app-designer-ui/core-features/#how-page-locking-works","title":"How Page Locking Works","text":"<ol> <li>Lock Activation: A user can lock a page to prevent others from making changes</li> <li>Exclusive Access: Only the user who locked the page can make significant modifications</li> <li>Conflict Prevention: Eliminates the risk of conflicting changes from multiple users</li> <li>Manager Override: Project managers can unlock pages when necessary</li> </ol>"},{"location":"designer-guide/app-designer-ui/core-features/#locking-scenarios","title":"Locking Scenarios","text":"<ul> <li>Critical Development: Lock pages when working on complex features</li> <li>Quality Assurance: Prevent changes during testing and review phases</li> <li>Release Preparation: Lock pages when preparing for production deployment</li> <li>Conflict Resolution: Use locks to resolve editing conflicts</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#lock-management","title":"Lock Management","text":"<ul> <li>Lock Status Display: Clear indication of which pages are locked and by whom</li> <li>Lock Duration: Locks can be temporary or long-term based on project needs</li> <li>Lock Release: Users can unlock their own pages when work is complete</li> <li>Manager Control: Project managers have authority to unlock any page</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#benefits-of-page-locking","title":"Benefits of Page Locking","text":"<ul> <li>Work Protection: Safeguard your development progress</li> <li>Collaboration Control: Manage team editing effectively</li> <li>Quality Assurance: Ensure changes are made systematically</li> <li>Conflict Prevention: Avoid editing conflicts and data loss</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#reset-functionality","title":"Reset Functionality","text":"<p>The Reset feature allows you to clear all components from a page, returning it to an empty state. This provides a clean slate for redesigning or starting over.</p>"},{"location":"designer-guide/app-designer-ui/core-features/#reset-process","title":"Reset Process","text":"<ol> <li>Reset Confirmation: The system asks for confirmation before proceeding</li> <li>Complete Cleanup: All components, layouts, and configurations are removed</li> <li>Empty Canvas: The page returns to its initial empty state</li> <li>Fresh Start: You can begin building the page from scratch</li> </ol>"},{"location":"designer-guide/app-designer-ui/core-features/#when-to-use-reset","title":"When to Use Reset","text":"<ul> <li>Design Iteration: Start over with a completely new design approach</li> <li>Layout Restructuring: Clear the page to implement a new layout strategy</li> <li>Component Cleanup: Remove all components to rebuild systematically</li> <li>Testing Purposes: Clear the page for testing new component combinations</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#important-considerations","title":"Important Considerations","text":"<ul> <li>Irreversible Action: Reset cannot be undone once executed</li> <li>Data Loss: All page content and configurations will be permanently removed</li> <li>Confirmation Required: The system requires explicit confirmation to prevent accidental resets</li> <li>Backup Recommendation: Consider saving important work before resetting</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#reset-best-practices","title":"Reset Best Practices","text":"<ul> <li>Save Important Work: Export or save any valuable configurations before resetting</li> <li>Plan Your Approach: Have a clear design plan before resetting</li> <li>Use Incrementally: Consider making smaller changes instead of complete resets</li> <li>Team Communication: Inform team members if resetting shared pages</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#revision-management","title":"Revision Management","text":"<p>The Revision system provides comprehensive tracking of all changes made to your project over time. This creates a complete version history that supports collaboration and quality assurance.</p>"},{"location":"designer-guide/app-designer-ui/core-features/#revision-features","title":"Revision Features","text":"<ul> <li>Change Tracking: Monitor all modifications and updates to your project</li> <li>Version History: Maintain a complete timeline of project evolution</li> <li>Rollback Capability: Revert to earlier versions when needed</li> <li>Collaboration Support: Track changes from multiple team members</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#revision-benefits","title":"Revision Benefits","text":"<ul> <li>Risk Mitigation: Safely experiment with changes knowing you can revert</li> <li>Collaboration Transparency: Understand what changes were made and by whom</li> <li>Quality Assurance: Review changes before finalizing them</li> <li>Recovery Options: Restore previous working versions if issues arise</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#using-revisions","title":"Using Revisions","text":"<ul> <li>View History: Access the complete timeline of project changes</li> <li>Compare Versions: See differences between different revisions</li> <li>Restore Previous States: Roll back to earlier versions when needed</li> <li>Track Progress: Monitor how your project has evolved over time</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#revision-best-practices","title":"Revision Best Practices","text":"<ul> <li>Regular Publishing: Publish changes regularly to maintain a clear revision history</li> <li>Meaningful Descriptions: Provide clear descriptions for significant changes</li> <li>Review Process: Use revisions as part of your quality assurance process</li> <li>Backup Strategy: Use revisions as part of your backup and recovery strategy</li> </ul>"},{"location":"designer-guide/app-designer-ui/core-features/#integration-and-workflow","title":"Integration and Workflow","text":"<p>These core features work together to create a comprehensive development workflow:</p> <ol> <li>Development Phase: Use Save Draft to preserve your work-in-progress</li> <li>Testing Phase: Use Preview to validate your design and functionality</li> <li>Collaboration Phase: Use Page Lock to manage team editing</li> <li>Quality Phase: Use Revision to track and review changes</li> <li>Deployment Phase: Use Publish to make your work available to the team</li> </ol> <p>By mastering these core features, you can work efficiently and collaboratively while maintaining the quality and integrity of your application development process.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/","title":"Plugin Panel","text":"<p>The Plugin Panel is located on the right side of the App Designer and contains all the essential tools you need to build, structure, and enhance your pages. It's organized into several key sections that provide comprehensive functionality for application development.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#component-tree","title":"Component Tree","text":"<p>The Component Tree provides a hierarchical view that represents the structure of components within your project. It visually organizes and displays the relationships between different elements.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#key-features","title":"Key Features:","text":"<ul> <li>Hierarchical Structure: Shows the layout hierarchy of Sections, Blocks, and Cells</li> <li>Component Relationships: Displays parent-child relationships between components</li> <li>Selection Management: Click on any component in the tree to select it on the Canvas</li> <li>Structure Overview: Quickly understand the layout organization of your page</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#benefits","title":"Benefits:","text":"<ul> <li>Easy Navigation: Quickly locate specific components in complex layouts</li> <li>Structure Understanding: Visualize how your page is organized</li> <li>Quick Selection: Select components directly from the tree view</li> <li>Layout Planning: Plan your page structure before building</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#component-library","title":"Component Library","text":"<p>The Components Library is a collection of pre-built components that you can easily drag and drop into your application. This library provides a wide range of UI elements to accelerate your development process.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#available-component-categories","title":"Available Component Categories:","text":"<ul> <li>Layout Components: Sections, Blocks, Cells for structuring your page</li> <li>General Components: Box, Button, Card, Divider, Icon, Text</li> <li>Input Components: Forms, Text Inputs, Selects, Checkboxes, Date Pickers</li> <li>Data Display: Tables, Charts, Pictures, Progress indicators</li> <li>Navigation: Steps, Tabs, Breadcrumbs</li> <li>Feedback: Dialogs, Notifications, Alerts</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#usage","title":"Usage:","text":"<ul> <li>Drag &amp; Drop: Simply drag components from the library to your Canvas</li> <li>Instant Integration: Components are immediately available for use</li> <li>Consistent Design: Pre-built components follow design system guidelines</li> <li>Customization: Each component can be customized through the Setter Plugin</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#datasource","title":"Datasource","text":"<p>The Datasource feature manages data connections and repositories from which your application retrieves information. It's essential for creating dynamic, data-driven applications.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#capabilities","title":"Capabilities:","text":"<ul> <li>API Integration: Connect to external APIs and web services</li> <li>Database Connections: Link to database systems for data retrieval</li> <li>Data Binding: Bind component properties to data sources</li> <li>Real-time Updates: Configure automatic data refresh and updates</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#use-cases","title":"Use Cases:","text":"<ul> <li>Dynamic Content: Display data from external sources</li> <li>Form Submissions: Send data to backend services</li> <li>Data Tables: Populate tables with live data</li> <li>User Authentication: Connect to identity providers</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#source-code-panel","title":"Source Code Panel","text":"<p>The Source Code Panel provides direct access to view and edit the underlying source code of your project. This feature is essential for advanced users who prefer or need to work at the code level.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#features","title":"Features:","text":"<ul> <li>Code Viewing: Examine the generated HTML, CSS, and JavaScript</li> <li>Direct Editing: Make code-level modifications when needed</li> <li>Syntax Highlighting: Proper formatting for various programming languages</li> <li>Error Detection: Identify and fix code-level issues</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#benefits_1","title":"Benefits:","text":"<ul> <li>Advanced Customization: Make precise code-level changes</li> <li>Debugging: Troubleshoot issues at the source code level</li> <li>Performance Optimization: Optimize code for better performance</li> <li>Integration: Add custom code for complex functionality</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#revision","title":"Revision","text":"<p>The Revision feature allows you to track changes made to your project over time. It provides a comprehensive version history, making it easy to revert to previous states if needed.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#key-features_1","title":"Key Features:","text":"<ul> <li>Change Tracking: Monitor all modifications and updates</li> <li>Version History: Maintain a complete timeline of changes</li> <li>Rollback Capability: Revert to earlier versions when needed</li> <li>Collaboration Support: Track changes from multiple team members</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#benefits_2","title":"Benefits:","text":"<ul> <li>Risk Mitigation: Safely experiment with changes</li> <li>Collaboration: Understand what changes were made and by whom</li> <li>Quality Assurance: Review changes before finalizing</li> <li>Recovery: Restore previous working versions if issues arise</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#comments","title":"Comments","text":"<p>The Comments system allows you to add annotations, notes, and instructions to your application. This feature enhances collaboration and provides context for team members.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#use-cases_1","title":"Use Cases:","text":"<ul> <li>Design Notes: Document design decisions and rationale</li> <li>Collaboration: Communicate with team members about specific components</li> <li>Instructions: Provide guidance for future developers</li> <li>Review Process: Mark areas for review or improvement</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#features_1","title":"Features:","text":"<ul> <li>Component-specific Comments: Attach notes to specific UI elements</li> <li>Rich Text Support: Format comments with markdown or rich text</li> <li>Threaded Discussions: Create conversations around specific areas</li> <li>Notification System: Alert team members to new comments</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#page-scan","title":"Page Scan","text":"<p>Page Scan is a tool that analyzes and checks your project or application for potential issues, errors, or improvements. It helps ensure the quality and performance of your work.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#analysis-areas","title":"Analysis Areas:","text":"<ul> <li>Performance Issues: Identify slow-loading components or inefficient code</li> <li>Accessibility Problems: Detect accessibility violations and compliance issues</li> <li>Best Practices: Suggest improvements based on industry standards</li> <li>Error Detection: Find broken links, missing resources, or configuration issues</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#benefits_3","title":"Benefits:","text":"<ul> <li>Quality Assurance: Ensure your application meets quality standards</li> <li>Performance Optimization: Identify and fix performance bottlenecks</li> <li>Compliance: Meet accessibility and industry standards</li> <li>User Experience: Improve overall application usability</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#libraries","title":"Libraries","text":"<p>The Libraries feature provides access to collections of reusable code or resources that can be imported into your project. This saves time and effort by providing pre-built functionalities.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#available-libraries","title":"Available Libraries:","text":"<ul> <li>UI Component Libraries: Additional component sets and widgets</li> <li>Utility Libraries: Helper functions and common utilities</li> <li>Icon Libraries: Collections of icons and visual elements</li> <li>Animation Libraries: Pre-built animations and transitions</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#benefits_4","title":"Benefits:","text":"<ul> <li>Time Savings: Avoid reinventing common functionality</li> <li>Consistency: Maintain consistent design patterns</li> <li>Maintenance: Reduce code maintenance overhead</li> <li>Community Support: Leverage well-tested, community-supported code</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#schema","title":"Schema","text":"<p>The Schema feature defines the structure and organization of your data in JSON format. It outlines the relationships, constraints, and rules governing how data is stored and accessed.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#capabilities_1","title":"Capabilities:","text":"<ul> <li>Data Structure Definition: Define the format and organization of your data</li> <li>Validation Rules: Set constraints and validation requirements</li> <li>Relationship Mapping: Define how different data entities relate to each other</li> <li>API Documentation: Generate documentation for your data structures</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#use-cases_2","title":"Use Cases:","text":"<ul> <li>Form Validation: Ensure data input meets requirements</li> <li>API Design: Define the structure of API requests and responses</li> <li>Database Design: Plan database table structures and relationships</li> <li>Data Integration: Ensure compatibility between different data sources</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#responsive-layout","title":"Responsive Layout","text":"<p>The Responsive Layout feature ensures your project adapts and looks good on various devices and screen sizes, providing a consistent user experience across all platforms.</p>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#features_2","title":"Features:","text":"<ul> <li>Breakpoint Management: Configure different layouts for various screen sizes</li> <li>Mobile Optimization: Ensure mobile-friendly design and functionality</li> <li>Flexible Grids: Use responsive grid systems for adaptive layouts</li> <li>Touch Support: Optimize for touch-based interactions on mobile devices</li> </ul>"},{"location":"designer-guide/app-designer-ui/plugin-panel/#benefits_5","title":"Benefits:","text":"<ul> <li>Cross-Platform Compatibility: Works seamlessly across all devices</li> <li>User Experience: Provides consistent experience regardless of device</li> <li>SEO Benefits: Better search engine optimization for mobile users</li> <li>Future-Proofing: Ensures your application works with new devices</li> </ul> <p>The Plugin Panel is your comprehensive toolkit for building robust, feature-rich applications. Each section provides specialized functionality that, when combined, gives you everything needed to create professional-grade user interfaces.</p>"},{"location":"designer-guide/app-designer-ui/resource-panel/","title":"Resource Panel","text":"<p>The Resource Panel, located on the left side of the App Designer, is your project\u2019s control center. It helps you create, organize, and maintain all the pages and assets your application needs.</p>"},{"location":"designer-guide/app-designer-ui/resource-panel/#pages","title":"Pages","text":"<p>A Page is a separate screen or view in your application, like a login screen, a dashboard, or a product listing. The \"Pages\" section of the Resource Panel is where you manage the overall structure of your application.</p>"},{"location":"designer-guide/app-designer-ui/resource-panel/#creating-a-new-page","title":"Creating a New Page","text":"<p>To add a new page to your application, simply click the \"+\" icon next to the \"Pages\" heading. You will be prompted to enter the page details, such as its name and Page ID.</p> <p></p>"},{"location":"designer-guide/app-designer-ui/resource-panel/#managing-pages","title":"Managing Pages","text":"<ul> <li> <p>Switching Pages: Click on any page in the list to load it into the Canvas for editing.</p> <p></p> </li> <li> <p>Editing Page Properties: Hover over a page and click the edit icon to change its properties, such as its name, Page ID, or layout type.</p> <p></p> </li> </ul>"},{"location":"designer-guide/app-designer-ui/resource-panel/#assets","title":"Assets","text":"<p>The Assets section is your project\u2019s media and file library. This is where you upload and manage all the static files your application will use.</p>"},{"location":"designer-guide/app-designer-ui/resource-panel/#uploading-assets","title":"Uploading Assets","text":"<p>To upload a new asset, click the \"+\" icon next to the \"Assets\" heading. You can upload a wide variety of file types, including:</p> <ul> <li>Images (JPG, PNG, SVG) for backgrounds, icons, and illustrations.</li> <li>CSS files for custom styles that can be applied across your application.</li> <li>JavaScript files for custom client-side logic and interactivity.</li> <li>Font files to bring your own typography into the project.</li> </ul> <p></p> <p>By keeping all your resources organized in the Resource Panel, you can easily access them whenever you need them and ensure consistency across your entire application.</p>"},{"location":"designer-guide/app-designer-ui/setter-plugin/","title":"Setter Plugin","text":"<p>The Setter Plugin is a dynamic panel that appears on the right side of the App Designer when you select a component on the Canvas. It's your primary tool for configuring and customizing the properties, styles, and events of selected components.</p>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#setter-plugin-overview","title":"Setter Plugin Overview","text":"<p>The Setter Plugin provides a comprehensive interface for component configuration, allowing you to transform basic components into fully functional, customized elements that meet your specific design and functionality requirements.</p>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#dynamic-display","title":"Dynamic Display","text":"<ul> <li>Context-Sensitive: Only appears when a component is selected</li> <li>Component-Specific: Shows relevant options for the selected component type</li> <li>Real-time Updates: Changes are immediately reflected on the Canvas</li> <li>Intuitive Interface: Organized into logical sections for easy navigation</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#configuration-sections","title":"Configuration Sections","text":""},{"location":"designer-guide/app-designer-ui/setter-plugin/#props-properties","title":"Props (Properties)","text":"<p>The Props section allows you to configure the content and behavior of your selected component.</p>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#common-properties","title":"Common Properties","text":"<ul> <li>Content Properties: Text, labels, placeholders, and default values</li> <li>Behavior Properties: Enabled/disabled states, visibility, and interaction modes</li> <li>Data Properties: Data binding, validation rules, and format settings</li> <li>Functional Properties: Event handlers, callbacks, and business logic</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#property-types","title":"Property Types","text":"<ul> <li>Text Inputs: Simple text fields for string values</li> <li>Number Inputs: Numeric fields with validation and formatting</li> <li>Boolean Toggles: Checkboxes and switches for true/false values</li> <li>Selection Lists: Dropdowns and multi-select options</li> <li>Date/Time Pickers: Calendar and time selection controls</li> <li>File Uploads: File selection and upload configuration</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#styles","title":"Styles","text":"<p>The Styles section provides comprehensive control over the visual appearance of your components.</p>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#visual-styling","title":"Visual Styling","text":"<ul> <li>Colors: Background colors, text colors, border colors, and accent colors</li> <li>Typography: Font families, sizes, weights, and text decorations</li> <li>Spacing: Margins, padding, and internal spacing</li> <li>Borders: Border styles, widths, colors, and radius values</li> <li>Shadows: Box shadows, text shadows, and depth effects</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#layout-styling","title":"Layout Styling","text":"<ul> <li>Dimensions: Width, height, min/max dimensions, and aspect ratios</li> <li>Positioning: Position types, z-index, and coordinate positioning</li> <li>Display: Display modes, visibility, and overflow handling</li> <li>Flexbox: Flex properties for responsive layouts</li> <li>Grid: Grid properties for advanced layout systems</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#responsive-styling","title":"Responsive Styling","text":"<ul> <li>Breakpoint Management: Different styles for different screen sizes</li> <li>Mobile Optimization: Touch-friendly sizing and spacing</li> <li>Adaptive Layouts: Styles that adapt to container dimensions</li> <li>Progressive Enhancement: Styles that enhance based on device capabilities</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#events","title":"Events","text":"<p>The Events section enables you to add interactivity by binding component events to your application logic.</p>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#event-types","title":"Event Types","text":"<ul> <li>User Interaction Events: Click, hover, focus, blur, and input events</li> <li>Form Events: Submit, change, validation, and reset events</li> <li>Lifecycle Events: Component creation, mounting, updating, and destruction</li> <li>Custom Events: User-defined events for specific functionality</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#event-handling","title":"Event Handling","text":"<ul> <li>Event Binding: Connect events to JavaScript functions</li> <li>Event Parameters: Access event data and component state</li> <li>Event Propagation: Control how events bubble through the component tree</li> <li>Event Prevention: Stop default behavior and event propagation</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#advanced-event-features","title":"Advanced Event Features","text":"<ul> <li>Debouncing: Limit event frequency for performance optimization</li> <li>Throttling: Control event execution rate</li> <li>Event Delegation: Handle events for dynamically created components</li> <li>Custom Event Dispatching: Create and dispatch custom events</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"designer-guide/app-designer-ui/setter-plugin/#data-binding","title":"Data Binding","text":"<ul> <li>One-way Binding: Display data from data sources</li> <li>Two-way Binding: Synchronize data between components and sources</li> <li>Computed Properties: Dynamic values based on other properties</li> <li>Data Validation: Ensure data meets requirements and constraints</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#conditional-rendering","title":"Conditional Rendering","text":"<ul> <li>Visibility Conditions: Show/hide components based on data or state</li> <li>Dynamic Content: Change content based on conditions</li> <li>State-dependent Styling: Apply different styles based on component state</li> <li>Context-aware Display: Adapt display based on user roles or permissions</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Lazy Loading: Load components only when needed</li> <li>Virtual Scrolling: Efficiently render large lists and tables</li> <li>Component Caching: Cache frequently used components</li> <li>Bundle Optimization: Minimize code size and loading time</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#setter-plugin-workflow","title":"Setter Plugin Workflow","text":""},{"location":"designer-guide/app-designer-ui/setter-plugin/#configuration-process","title":"Configuration Process","text":"<ol> <li>Select Component: Click on a component on the Canvas to select it</li> <li>Review Properties: Examine the current configuration in the Setter Plugin</li> <li>Make Changes: Modify properties, styles, and events as needed</li> <li>Preview Changes: See updates immediately on the Canvas</li> <li>Test Functionality: Verify that the component works as expected</li> <li>Save Changes: Use Save Draft or Publish to preserve your work</li> </ol>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#best-practices","title":"Best Practices","text":"<ul> <li>Incremental Changes: Make small changes and test frequently</li> <li>Property Validation: Ensure property values are within acceptable ranges</li> <li>Style Consistency: Maintain consistent styling across similar components</li> <li>Event Efficiency: Use efficient event handlers to maintain performance</li> <li>Documentation: Document complex configurations for team reference</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#integration-with-other-features","title":"Integration with Other Features","text":""},{"location":"designer-guide/app-designer-ui/setter-plugin/#canvas-integration","title":"Canvas Integration","text":"<ul> <li>Real-time Updates: Changes in the Setter Plugin immediately reflect on the Canvas</li> <li>Visual Feedback: See the impact of your configuration choices instantly</li> <li>Component Selection: Easy selection and configuration workflow</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#plugin-panel-integration","title":"Plugin Panel Integration","text":"<ul> <li>Component Library: Access to all available components for configuration</li> <li>Component Tree: Navigate and select components for configuration</li> <li>Tool Integration: Use other tools in conjunction with component configuration</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#collaboration-features","title":"Collaboration Features","text":"<ul> <li>Shared Configuration: Team members can see and modify component configurations</li> <li>Configuration History: Track changes through the revision system</li> <li>Configuration Templates: Save and reuse common configuration patterns</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#setter-plugin-benefits","title":"Setter Plugin Benefits","text":""},{"location":"designer-guide/app-designer-ui/setter-plugin/#development-efficiency","title":"Development Efficiency","text":"<ul> <li>Rapid Configuration: Quickly configure components without coding</li> <li>Visual Feedback: See configuration results immediately</li> <li>Template Reuse: Save and reuse common configurations</li> <li>Bulk Operations: Configure multiple similar components efficiently</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#quality-assurance","title":"Quality Assurance","text":"<ul> <li>Configuration Validation: Ensure properties are set correctly</li> <li>Visual Testing: Test component appearance and behavior</li> <li>Responsive Testing: Verify component behavior across different screen sizes</li> <li>Accessibility Testing: Ensure components meet accessibility requirements</li> </ul>"},{"location":"designer-guide/app-designer-ui/setter-plugin/#team-collaboration","title":"Team Collaboration","text":"<ul> <li>Shared Understanding: Team members can see component configurations</li> <li>Configuration Standards: Maintain consistent component behavior across the team</li> <li>Knowledge Sharing: Share configuration knowledge and best practices</li> <li>Code Review: Review component configurations as part of the development process</li> </ul> <p>The Setter Plugin is an essential tool in the KAIZEN App Designer, providing you with the power to transform basic components into fully customized, functional elements that meet your specific design and functionality requirements. By mastering the Setter Plugin, you can create rich, interactive user interfaces that provide exceptional user experiences.</p>"},{"location":"designer-guide/components/","title":"Components Library","text":"<p>The Component Library is your toolbox in Kaizen\u2019s App Designer. It contains all the pre-built, ready-to-use UI components that you can quickly add to your page just like picking the right Lego piece to complete your structure.</p> <p>While the Component Tree shows you the structure of your page, the Component Library is where you get the actual building blocks to fill that structure.</p>"},{"location":"designer-guide/components/#types-of-components","title":"Types of Components","text":"<p>A component is any functional or visual element you can place on your page. Components can range from basic text and images to complex forms, tables, and charts.</p> <p>You\u2019ll find them grouped logically inside the library, and you can search to locate what you need.</p>"},{"location":"designer-guide/components/#common-examples-include","title":"Common examples include:","text":"<ul> <li>Basic elements: Text, images, buttons, dividers.</li> <li>Forms &amp; inputs: Input fields, text areas, dropdowns, radio buttons, checkboxes.</li> <li>Containers: Cards, lists, grids, accordions.</li> <li>Media: Icons, videos, images.</li> <li>Interactive elements: Tabs, sliders, pagination.</li> </ul>"},{"location":"designer-guide/components/#adding-a-component","title":"Adding a Component","text":"<ol> <li>Open the Component Library Click the Component Library icon in the left sidebar (second from the top).</li> <li>Search or browse Either scroll through the categories or use the search bar to find a specific component.</li> <li>Drag &amp; drop Click on the component and drag it directly onto the Canvas, placing it inside a section, block, or cell.</li> <li>Customize Select the component to open the Setter Plugin on the right-hand side, where you can edit text, style, theme, and behavior.</li> </ol>"},{"location":"designer-guide/components/#how-to-use-the-component-library-effectively","title":"How to use the Component Library effectively","text":"<p>Components in the library are fully reusable, allowing you to place them in multiple locations across your project. Once added, you can adjust their style and behavior to match your design needs, or combine them with other components to create more complex layouts.</p> <p>This flexibility lets you:</p> <ul> <li>Build pages quickly without starting from scratch.</li> <li>Maintain design consistency by reusing the same elements across different pages.</li> <li>Customize individual components for unique requirements.</li> </ul> <p>When you drag a component into the Canvas, it automatically becomes part of the Component Tree structure, meaning you can navigate to it, move it, or modify it just like any other element in your page layout.</p>"},{"location":"designer-guide/components/#example","title":"Example","text":"<p>Let\u2019s say you have a form but it\u2019s missing a Submit button:</p> <ol> <li>Open the Component Library.</li> <li>Search for \u201cButton\u201d.</li> <li>Drag it into the form\u2019s cell.</li> <li>Use the Setter Plugin to change its label to \u201cSubmit\u201d and apply a light or dark theme.</li> </ol> <p></p>"},{"location":"designer-guide/components/#conclusion","title":"Conclusion","text":"<p>The Component Library gives you the speed of pre-built elements with the flexibility to customize them. Combined with the Component Tree and Setter Plugin, it allows you to build rich, interactive pages in minutes.</p> <p>What\u2019s next: Resources Panel Overview \u2192</p>"},{"location":"designer-guide/components/data-display/","title":"Data Display (Tables &amp; Charts)","text":"<p>Effectively displaying data is crucial for creating a user-friendly application. KAIZEN provides powerful components for organizing and visualizing data, including tables and charts.</p>"},{"location":"designer-guide/components/data-display/#tables","title":"Tables","text":"<p>The Table component is a versatile tool for displaying structured data in a tabular format. It is highly customizable and supports features like sorting, pagination, and custom cell rendering.</p>"},{"location":"designer-guide/components/data-display/#practical-example-creating-a-table-with-sorting-and-pagination","title":"Practical Example: Creating a Table with Sorting and Pagination","text":"<p>In this tutorial, we will create a table to display a list of registered courses.</p>"},{"location":"designer-guide/components/data-display/#1-setting-up-the-table","title":"1. Setting Up the Table","text":"<ul> <li>Create a New Page: Start with a new page for your table.</li> <li>Add a Table Component: From the Component Library, drag a Table component onto the canvas.</li> <li>Configure Headers: In the Props tab of the Table component, go to the Data Column section. Here, you can define the headers for your table. For our example, we will add headers for <code>Course Name</code>, <code>Course Code</code>, <code>Subject</code>, <code>Price</code>, etc.</li> </ul>"},{"location":"designer-guide/components/data-display/#2-adding-data-to-the-table","title":"2. Adding Data to the Table","text":"<p>You can populate the table with data in several ways, but a common method is to use a state variable.</p> <ul> <li>Prepare Your Data: In the Source Code Panel, create a state variable (e.g., <code>tableData</code>) and populate it with an array of JSON objects. Each object represents a row in the table, and the keys in the object should correspond to the Data Key you define for each column.</li> <li>Bind the Data: Select the Table component, and in the Props tab, find the Data Source field. Use the Variable Binding option to link it to your <code>tableData</code> state variable.</li> </ul>"},{"location":"designer-guide/components/data-display/#3-implementing-sorting","title":"3. Implementing Sorting","text":"<ul> <li>Enable Sorting: For each column that you want to be sortable, edit the column in the Data Column section and enable the Allow Sorting option.</li> <li>Bind the Sort Event: In the Events tab of the Table component, bind the <code>onSort</code> event to a function in your source code that will handle the sorting logic. This function should update the order of the data in your <code>tableData</code> state variable.</li> </ul>"},{"location":"designer-guide/components/data-display/#4-implementing-pagination","title":"4. Implementing Pagination","text":"<ul> <li>Enable Pagination: In the Props tab of the Table component, you will find the Pagination Configuration section.</li> <li>Bind Pagination Properties:<ul> <li>Bind the Current Page property to a state variable (e.g., <code>currentPage</code>).</li> <li>Bind the Total Records property to a state variable that holds the total number of items in your dataset.</li> <li>Bind the <code>onChange</code> event to a function that updates the <code>currentPage</code> state variable and fetches the data for the new page.</li> </ul> </li> </ul>"},{"location":"designer-guide/components/data-display/#charts","title":"Charts","text":"<p>Charts are an excellent way to visualize data and make it easier to understand. KAIZEN provides several chart components, including bar charts and pie charts.</p>"},{"location":"designer-guide/components/data-display/#practical-example-adding-a-bar-chart","title":"Practical Example: Adding a Bar Chart","text":"<p>Let's create a bar chart to compare the prices of different courses.</p> <ul> <li>Add a Chart Component: From the Component Library, drag a Bar Chart component onto your page.</li> <li>Bind the Data: In the Props tab, use the Variable Binding option to link the chart's data source to the same <code>tableData</code> state variable we used for the table.</li> <li>Configure Axes:<ul> <li>Set the x-axis label to the key in your data that represents the price (e.g., <code>price</code>).</li> <li>Set the y-axis label to the key that represents the course name (e.g., <code>name</code>).</li> </ul> </li> </ul> <p>By following these steps, you can create rich, interactive data displays that enhance the user experience of your application.</p>"},{"location":"designer-guide/components/feedback/","title":"User Feedback (Dialogs)","text":""},{"location":"designer-guide/components/forms/","title":"Information Input (Forms)","text":"<p>Forms are essential for collecting user input. KAIZEN's App Designer provides a powerful set of tools to create everything from simple contact forms to complex, multi-step wizards with validation.</p>"},{"location":"designer-guide/components/forms/#introduction-to-form-fields","title":"Introduction to Form Fields","text":"<p>Forms are built using a variety of Form Item components that accept user input. These can be found in the Component Library.</p> <p>Common form fields include: -   Text Input: For single-line text entries. -   Text Area: For multi-line text. -   Select (Dropdown): For selecting from a list of options. -   Checkbox: For binary choices. -   Radio Button: For selecting one option from a group. -   Date Picker: For selecting dates.</p>"},{"location":"designer-guide/components/forms/#form-validation","title":"Form Validation","text":"<p>Validation rules ensure that the data submitted by users is in the correct format. This is the first line of defense against invalid data.</p> <p>You can add validation rules to any Form Item from the Props tab. Common validation types include: -   Mandatory: Ensures the field is not left empty. -   Length: Restricts the minimum and/or maximum number of characters. -   Format: Enforces specific formats, such as numbers, email addresses, or custom patterns using Regular Expressions (Regex).</p>"},{"location":"designer-guide/components/forms/#practical-example-creating-a-multi-step-form","title":"Practical Example: Creating a Multi-Step Form","text":"<p>In this tutorial, we will build a multi-step course creation form. This is a common pattern for breaking down long forms into manageable steps, improving the user experience.</p> <p>Our form will have four steps: 1.  Course Info 2.  Instructor Particulars 3.  Class Location 4.  Class Schedule</p>"},{"location":"designer-guide/components/forms/#1-setting-up-the-form-skeleton","title":"1. Setting Up the Form Skeleton","text":"<p>Before adding the form fields, we need to create the basic structure.</p> <ul> <li>Create a New Page: Start by creating a new page for your form.</li> <li>Add a Steps Component: From the Component Library, drag a Steps component to the top of your page. This will serve as the visual indicator for the form's progress.</li> <li>Add a Form Template: Drag a Form Template component below the Steps component. This will be the container for all our form fields.</li> <li>Create Navigation Buttons: Inside the Form Template, add \"Next\" and \"Previous\" buttons to allow users to navigate between the steps.</li> </ul>"},{"location":"designer-guide/components/forms/#2-building-the-course-info-form","title":"2. Building the \"Course Info\" Form","text":"<p>The first step is to collect basic information about the course.</p> <ul> <li>Add Form Items: Drag the necessary Form Item components into the form. For this step, we'll need:<ul> <li><code>Course Title</code> (Text Input)</li> <li><code>Course Code</code> (Text Input with number validation)</li> <li><code>Enrollment Type</code> (Select)</li> <li><code>Subject Type</code> (Select)</li> <li><code>Course Fee</code> (Text Input with number validation)</li> <li><code>Description</code> (Text Area)</li> </ul> </li> <li>Configure Validation: Add validation rules to each field as needed. For example, make the <code>Course Title</code> and <code>Course Code</code> mandatory.</li> </ul>"},{"location":"designer-guide/components/forms/#3-creating-subsequent-steps","title":"3. Creating Subsequent Steps","text":"<p>Follow a similar process to create the remaining forms for \"Instructor Particulars,\" \"Class Location,\" and \"Class Schedule.\" You can use a variety of form fields to meet the requirements of each step.</p>"},{"location":"designer-guide/components/forms/#4-implementing-step-navigation","title":"4. Implementing Step Navigation","text":"<p>To make the multi-step form functional, you need to control the visibility of each form based on the current step.</p> <ul> <li>Use a State Variable: In the Source Code Panel, create a state variable (e.g., <code>currentStep</code>) to keep track of the active step.</li> <li>Control Visibility: For each form, use the Advanced tab to set the Visible property to an expression that checks the value of <code>currentStep</code>. For example, the \"Course Info\" form should be visible only when <code>this.state.currentStep === 0</code>.</li> <li>Add Logic to Buttons: In the Events tab for the \"Next\" and \"Previous\" buttons, bind <code>onClick</code> events to functions that increment or decrement the <code>currentStep</code> variable.</li> </ul> <p>By following these steps, you can create a user-friendly, multi-step form that guides users through the data entry process in a clear and organized manner.</p>"},{"location":"designer-guide/components/general/","title":"General Components","text":""},{"location":"designer-guide/components/navigation/","title":"Navigation (Steps &amp; Tabs)","text":""},{"location":"designer-guide/layouts/building-a-screen-skeleton/","title":"Practical Example: Building a Screen Skeleton","text":"<p>In this tutorial, we will walk through the methodology of creating a page skeleton from scratch using an example webpage. This will demonstrate how to effectively use Sections, Blocks, and Cells to build a structured and responsive layout.</p>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#the-goal","title":"The Goal","text":"<p>We will build the basic framework for the following webpage:</p> <p></p>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-1-create-the-initial-layout","title":"Step 1: Create the Initial Layout","text":"<p>First, identify the main horizontal and vertical divisions of the page. This page has a main content area that is split into two vertical columns.</p> <ol> <li>Start with a single Section.</li> <li>Inside the Section, select the default Block.</li> <li>Use the vertical cut option to split the Block into two columns, creating a left and a right block for our content.</li> </ol>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-2-divide-the-left-block","title":"Step 2: Divide the Left Block","text":"<p>The left block contains two distinct horizontal areas.</p> <ol> <li>Select the Cell inside the left Block.</li> <li>Use the horizontal split option to divide the cell into two rows (a top and a bottom cell).</li> </ol>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-3-structure-the-top-left-area-for-cards","title":"Step 3: Structure the Top-Left Area for Cards","text":"<p>The top-left area will contain a grid of cards.</p> <ol> <li>Select the top cell you created in the previous step.</li> <li>Use the horizontal split again to create two rows.</li> <li>Use the vertical split on each of those new cells to create a 2x2 grid.</li> </ol>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-4-add-card-components","title":"Step 4: Add Card Components","text":"<p>Now that the grid structure is in place, you can add the Card components.</p> <ol> <li>From the Component Library, drag a Card component into the top-left cell of your new grid.</li> </ol>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-5-populate-the-card-grid","title":"Step 5: Populate the Card Grid","text":"<ol> <li>Duplicate the Card component and place a copy in each of the four cells in your 2x2 grid. You can, of course, add more cards as needed.</li> </ol>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-6-add-the-table-component","title":"Step 6: Add the Table Component","text":"<p>The area below the cards in the left column is for a table.</p> <ol> <li>Select the bottom cell from Step 2.</li> <li>Drag a Table component from the Component Library into this cell.</li> </ol>"},{"location":"designer-guide/layouts/building-a-screen-skeleton/#step-7-add-components-to-the-right-block","title":"Step 7: Add Components to the Right Block","text":"<p>The right block contains a mix of components. You can now populate this area.</p> <ol> <li>Drag and drop the required components, such as Text, Buttons, or even other Cards, into the cell of the right block.</li> </ol> <p>Your final screen skeleton is now complete and ready for content and styling. This structured approach ensures that your layout is logical, scalable, and responsive from the start.</p>"},{"location":"designer-guide/layouts/hierarchy/","title":"Layout Hierarchy: Section, Block, and Cell","text":"<p>Building a solid layout is the first step in creating a well-structured and responsive page. In KAIZEN, the layout is built on a clear parent-child hierarchy of three key components: Sections, Blocks, and Cells.</p> <ul> <li>Section: Can contain Blocks.</li> <li>Block: Can contain Cells, but not Sections.</li> <li>Cell: Cannot contain Sections or Blocks.</li> </ul> <p></p>"},{"location":"designer-guide/layouts/hierarchy/#section-vs-block","title":"Section vs. Block","text":"<p>Understanding when to use a Section versus a Block is key to creating effective layouts.</p>"},{"location":"designer-guide/layouts/hierarchy/#sections","title":"Sections","text":"<p>Sections are the largest layout containers. They always take up the full width of the page and are used to group major, related parts of your UI.</p> <ul> <li>Organization: Use Sections to create distinct horizontal areas, such as a header, a feature showcase, or a footer.</li> <li>Customization: Sections offer more customization options for backgrounds and styling.</li> <li>Scalability: You can easily add or remove entire sections without affecting the rest of the page.</li> </ul> <p></p>"},{"location":"designer-guide/layouts/hierarchy/#blocks","title":"Blocks","text":"<p>Blocks are used for creating column-based layouts within a Section.</p> <ul> <li>Granularity: Use multiple Blocks to create side-by-side content, such as a two or three-column layout.</li> <li>Flexibility: Blocks can be easily rearranged within a Section to adapt to different design requirements.</li> </ul> <p></p>"},{"location":"designer-guide/layouts/hierarchy/#block-vs-cell","title":"Block vs. Cell","text":"<p>The distinction between Blocks and Cells is crucial for creating responsive designs.</p>"},{"location":"designer-guide/layouts/hierarchy/#blocks_1","title":"Blocks","text":"<ul> <li>Layout: Blocks support a vertical cut option and use a structured grid layout.</li> <li>Responsiveness: By default, Blocks have a responsive wrapping behavior. When the screen size is reduced, Blocks will stack vertically.</li> </ul>"},{"location":"designer-guide/layouts/hierarchy/#cells","title":"Cells","text":"<ul> <li>Layout: Cells support both vertical and horizontal cut options and use a flexible box layout.</li> <li>Responsiveness: Cells do not wrap by default. They are designed to hold content within a Block and maintain their relative positions.</li> </ul> <p>By understanding and correctly using the hierarchy of Sections, Blocks, and Cells, you can build complex, responsive, and maintainable page layouts with ease.</p>"},{"location":"designer-guide/layouts/managing-pages/","title":"Managing Pages","text":"<p>A Page is the canvas for your user interface. It is the top-level container for all the content that a user will see on a single screen. Before you can add components like forms, tables, or charts, you must first create a page to hold them.</p>"},{"location":"designer-guide/layouts/managing-pages/#creating-a-new-page","title":"Creating a New Page","text":"<p>All pages are created and managed from the Resource Panel. When you create a new page, you are essentially creating a blank slate on which you can build a specific part of your application's UI.</p>"},{"location":"designer-guide/layouts/managing-pages/#building-the-page-layout","title":"Building the Page Layout","text":"<p>Once you have a page, the next step is to define its structure. A well-structured layout is essential for creating a user experience that is both intuitive and responsive.</p> <p>The process of building a page layout involves two key concepts:</p> <ol> <li> <p>Layout Hierarchy: Understanding the relationship between Sections, Blocks, and Cells is the first step in building a solid foundation for your page. This hierarchy allows you to create everything from simple, single-column layouts to complex, multi-column designs.</p> </li> <li> <p>Building a Screen Skeleton: Before adding content, it is best practice to build a \"screen skeleton.\" This involves using the layout components to create the high-level structure of your page, ensuring that it is well-organized and ready for your components.</p> </li> </ol> <p>By first creating your pages and then building a thoughtful layout skeleton, you can ensure that your application is scalable, maintainable, and provides a consistent user experience across all screens.</p>"},{"location":"designer-guide/layouts/responsive-design/","title":"Responsive Design","text":"<p>Building a responsive layout ensures that your application looks and functions perfectly on any device, from wide-screen desktops to tablets and mobile phones. KAIZEN's App Designer has built-in tools to help you create and preview responsive designs.</p>"},{"location":"designer-guide/layouts/responsive-design/#previewing-on-different-devices","title":"Previewing on Different Devices","text":"<p>The Canvas allows you to instantly preview your design on different screen sizes. At the top of the Canvas, you will find icons to switch between desktop, tablet, and mobile views. Use these previews to check how your layout adapts and ensure that content remains readable and accessible on smaller screens.</p> <p></p>"},{"location":"designer-guide/layouts/responsive-design/#responsive-behavior-of-blocks-vs-cells","title":"Responsive Behavior of Blocks vs. Cells","text":"<p>The layout hierarchy you create with Blocks and Cells has a direct impact on how your application responds to different screen sizes.</p> <ul> <li> <p>Blocks for Major Layout: By default, when the screen becomes too narrow to fit multiple Blocks side-by-side, they will automatically wrap and stack vertically. This is the primary mechanism for creating responsive column layouts. For example, a three-column layout on a desktop will become a single-column layout on a mobile phone.</p> </li> <li> <p>Cells for Fine-Tuning: Cells, on the other hand, do not wrap by default. They are designed to hold content within a Block. You can use Cell splitting to create more complex arrangements that you want to maintain across screen sizes.</p> </li> </ul> <p>By combining the automatic wrapping of Blocks with the precise control of Cells, you can create sophisticated layouts that are both powerful and responsive.</p>"},{"location":"designer-guide/layouts/responsive-design/#practical-example-creating-a-responsive-login-page","title":"Practical Example: Creating a Responsive Login Page","text":"<p>Let's walk through how to create a responsive two-panel layout for a login page.</p>"},{"location":"designer-guide/layouts/responsive-design/#1-create-a-two-column-layout","title":"1. Create a Two-Column Layout","text":"<p>To create a responsive layout that adapts to smaller screens, we will use the Block component to design the left and right panels of the page.</p> <ul> <li> <p>With the Block component selected, hover over the middle handle until the Cut icon appears, then click it to vertically split your block into two.</p> <p></p> </li> </ul>"},{"location":"designer-guide/layouts/responsive-design/#2-add-content-containers","title":"2. Add Content Containers","text":"<ul> <li> <p>From the Components Library, drag a Box component into each of the two cells you just created. These will serve as the containers for the left and right panels.</p> <p></p> </li> </ul>"},{"location":"designer-guide/layouts/responsive-design/#3-style-the-panels","title":"3. Style the Panels","text":"<ul> <li>Select the first Box (left panel) and apply your desired styles. For example, you can set a background color and ensure the height is set to <code>100%</code> to fill the available space.</li> <li> <p>Do the same for the second Box (right panel).</p> <p></p> </li> </ul>"},{"location":"designer-guide/layouts/responsive-design/#4-observe-the-responsive-behavior","title":"4. Observe the Responsive Behavior","text":"<p>When you switch to the mobile preview, you will see that the two blocks automatically stack on top of each other, creating a user-friendly, single-column layout.</p> <p></p> <p>This demonstrates how KAIZEN's layout system, with its intelligent use of Blocks, makes it easy to build responsive designs with minimal effort.</p>"},{"location":"getting-started/account-setup/","title":"Account Setup &amp; Login","text":"<p>Before you can start building, you need to log into your KAIZEN environment.</p>"},{"location":"getting-started/account-setup/#daas-environment-access","title":"DaaS Environment Access","text":"<p>All trainees and new users are provided with an account in the Cloud Development Environment as a Service (DaaS).</p> <ul> <li>Environment URL: https://kaizen-daas.toppanecquaria.com/#/login</li> </ul>"},{"location":"getting-started/account-setup/#logging-in","title":"Logging In","text":"<p>To log in, you will need the following credentials, which should be provided by your system administrator:</p> <ol> <li>User Domain: This defines the group of applications you have access to. For most new users, this will be <code>AGP Designer</code>.</li> <li>Username: Your unique username, typically in an email format.<ul> <li>Example: <code>username@toppanecquaria.com</code></li> </ul> </li> <li>Password: Your assigned password.</li> </ol> <p> </p> <p>Enter your credentials and click \"Sign In\" to access the KAIZEN Studio.</p>"},{"location":"getting-started/account-setup/#troubleshooting","title":"Troubleshooting","text":"<p>If you have trouble logging in, please try the following:</p> <ul> <li>Ensure you have selected the correct User Domain from the dropdown menu.</li> <li>Double-check that your username and password are correct.</li> <li>If you have forgotten your password or continue to have issues, please contact your project administrator to have your credentials reset.</li> </ul>"},{"location":"getting-started/core-concepts/","title":"Core Concepts","text":"<p>To get the most out of KAIZEN, it's helpful to understand the key concepts and components that make up the platform.</p>"},{"location":"getting-started/core-concepts/#the-kaizen-ecosystem","title":"The KAIZEN Ecosystem","text":"<p>The KAIZEN platform is not a single tool, but a suite of integrated designers and services that work together. This is often referred to as the KAIZEN Studio.</p> <p> </p>"},{"location":"getting-started/core-concepts/#key-components","title":"Key Components","text":"<ul> <li> <p>App Designer: The visual, drag-and-drop environment for building user interfaces (the \"frontend\"). This is where you design pages, add components like forms and tables, and manage the user experience.</p> </li> <li> <p>Service Designer: The tool for creating and managing the \"backend\" logic of your application. You can define APIs, connect to external services, and manage how data is handled.</p> </li> <li> <p>Database Designer: A visual interface for creating and managing your application's database schema. You can define tables, columns, and relationships without writing complex SQL.</p> </li> <li> <p>Workflow Designer: A powerful tool for automating business processes. You can visually map out multi-step workflows, define logic, and assign tasks to different users or systems.</p> </li> <li> <p>Theme Designer: Allows you to customize the look and feel of your applications. You can manage color schemes, fonts, and layouts to ensure consistent branding.</p> </li> <li> <p>Identity &amp; Access Management (IAM): A centralized service for managing users, roles, and permissions. IAM ensures that your applications are secure and that users only have access to the features and data they are authorized to see.</p> </li> </ul>"},{"location":"getting-started/core-concepts/#fundamental-terminology","title":"Fundamental Terminology","text":"<ul> <li>Application: A project in KAIZEN. An application can be a standalone app, or it can be a \"Main\" application that coordinates multiple \"Micro\" applications.</li> <li>Page: A single screen or view within an application. You build pages in the App Designer.</li> <li>Component: The building blocks of a page. Components can be simple (like a Button or Text) or complex (like a Table or a Chart).</li> <li>Service: A backend microservice that provides data and functionality to your application via APIs.</li> <li>Datasource: A connection to a data source, such as a database or an external API, which you can then bind to your frontend components.</li> </ul>"},{"location":"getting-started/introduction/","title":"Welcome to KAIZEN","text":"<p>Welcome to the KAIZEN platform! This documentation will guide you through everything you need to know to build, deploy, and manage powerful applications with speed and flexibility.</p> Core Concepts <p>Understand the fundamental concepts and architecture of the KAIZEN platform.</p> A Tour of the Studio <p>Get a complete overview of the KAIZEN Studio and its powerful features.</p> Designer's Guide <p>Learn how to use the visual App Designer to create beautiful user interfaces.</p> Developer's Guide <p>Design databases, build robust APIs, and automate complex business logic.</p> Tutorials <p>Follow step-by-step guides to build your first application and learn key features.</p> Component Reference <p>Explore the comprehensive library of UI components available in the App Designer.</p>"},{"location":"getting-started/studio-tour/","title":"A Tour of the KAIZEN Studio","text":"<p>The KAIZEN Studio is your central hub for building and managing applications. It provides access to all the powerful designers and tools you need to bring your vision to life.</p> <p>Note that not all features may be accessible depending on your assigned role. The platform uses Identity and Access Management (IAM) to control access, ensuring that users only see the tools relevant to their responsibilities.</p>"},{"location":"getting-started/studio-tour/#app-designer","title":"App Designer","text":"<p>The App Designer is where you will spend most of your time creating the user interface of your application. It is composed of several key panels:</p> <ul> <li>Resource Panel: Manage and access the various pages of your application.</li> <li>Plugin Panel: Access the Component Tree, Components Library, and other tools to build your UI.</li> <li>Canvas: The visual workspace where you design and arrange the elements of your project.</li> <li>Source Code Panel: View and edit the underlying source code of your project.</li> </ul>"},{"location":"getting-started/studio-tour/#saving-and-publishing","title":"Saving and Publishing","text":"<p>In KAIZEN, you can save your progress as a draft or publish it for others to see.</p> <ul> <li> <p>Save Draft: When you save a draft, it is stored privately in your account. Other users cannot see your changes until you publish them.</p> <p></p> </li> <li> <p>Publish Page: When you publish a page, your changes become visible to other users with access to the project.</p> <p></p> </li> </ul>"},{"location":"getting-started/studio-tour/#previewing-your-application","title":"Previewing Your Application","text":"<p>The preview feature allows you to see how your page will look and function before it goes live. You can also test the user experience for different roles.</p> <p></p>"},{"location":"getting-started/studio-tour/#collaborative-editing-with-page-lock","title":"Collaborative Editing with Page Lock","text":"<p>The Page Lock feature prevents multiple users from editing the same page simultaneously, avoiding conflicts and ensuring a smooth collaborative workflow.</p> <p></p>"},{"location":"getting-started/studio-tour/#starting-a-new-project","title":"Starting a New Project","text":"<p>When you start a new project, an empty application will be created for you. You can start editing it by clicking on the design icon.</p> <p></p>"}]}